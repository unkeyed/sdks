/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import * as components from "../components/index.js";
export class UnauthorizedErrorResponse extends Error {
    constructor(err) {
        const message = "message" in err && typeof err.message === "string"
            ? err.message
            : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;
        this.meta = err.meta;
        this.error = err.error;
        this.name = "UnauthorizedErrorResponse";
    }
}
/** @internal */
export const UnauthorizedErrorResponse$inboundSchema = z.object({
    meta: components.Meta$inboundSchema,
    error: components.BaseError$inboundSchema,
})
    .transform((v) => {
    return new UnauthorizedErrorResponse(v);
});
/** @internal */
export const UnauthorizedErrorResponse$outboundSchema = z.instanceof(UnauthorizedErrorResponse)
    .transform(v => v.data$)
    .pipe(z.object({
    meta: components.Meta$outboundSchema,
    error: components.BaseError$outboundSchema,
}));
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UnauthorizedErrorResponse$;
(function (UnauthorizedErrorResponse$) {
    /** @deprecated use `UnauthorizedErrorResponse$inboundSchema` instead. */
    UnauthorizedErrorResponse$.inboundSchema = UnauthorizedErrorResponse$inboundSchema;
    /** @deprecated use `UnauthorizedErrorResponse$outboundSchema` instead. */
    UnauthorizedErrorResponse$.outboundSchema = UnauthorizedErrorResponse$outboundSchema;
})(UnauthorizedErrorResponse$ || (UnauthorizedErrorResponse$ = {}));
//# sourceMappingURL=unauthorizederrorresponse.js.map