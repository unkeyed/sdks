import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type BaseError = {
    /**
     * A human-readable explanation specific to this occurrence of the problem.
     */
    detail: string;
    /**
     * A URI reference that identifies the specific occurrence of the problem.
     */
    instance?: string | undefined;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * A short, human-readable summary of the problem type. This value should not change between occurrences of the error.
     */
    title: string;
    /**
     * A URI reference to human-readable documentation for the error.
     */
    type: string;
};
/** @internal */
export declare const BaseError$inboundSchema: z.ZodType<BaseError, z.ZodTypeDef, unknown>;
/** @internal */
export type BaseError$Outbound = {
    detail: string;
    instance?: string | undefined;
    status: number;
    title: string;
    type: string;
};
/** @internal */
export declare const BaseError$outboundSchema: z.ZodType<BaseError$Outbound, z.ZodTypeDef, BaseError>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace BaseError$ {
    /** @deprecated use `BaseError$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BaseError, z.ZodTypeDef, unknown>;
    /** @deprecated use `BaseError$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BaseError$Outbound, z.ZodTypeDef, BaseError>;
    /** @deprecated use `BaseError$Outbound` instead. */
    type Outbound = BaseError$Outbound;
}
export declare function baseErrorToJSON(baseError: BaseError): string;
export declare function baseErrorFromJSON(jsonString: string): SafeParseResult<BaseError, SDKValidationError>;
//# sourceMappingURL=baseerror.d.ts.map