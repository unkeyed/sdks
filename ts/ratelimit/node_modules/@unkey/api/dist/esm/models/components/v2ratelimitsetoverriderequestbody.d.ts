import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * Sets a new or overwrites an existing override.
 */
export type V2RatelimitSetOverrideRequestBody = {
    /**
     * The id of the namespace. Either namespaceId or namespaceName must be provided
     */
    namespaceId?: string | undefined;
    /**
     * The name of the namespace. Either namespaceId or namespaceName must be provided
     */
    namespaceName?: string | undefined;
    /**
     * The duration in milliseconds for the rate limit window.
     */
    duration: number;
    /**
     * Identifier of your user, this can be their userId, an email, an ip or anything else. Wildcards ( * ) can be used to match multiple identifiers, More info can be found at https://www.unkey.com/docs/ratelimiting/overrides#wildcard-rules
     */
    identifier: string;
    /**
     * The maximum number of requests allowed.
     */
    limit: number;
};
/** @internal */
export declare const V2RatelimitSetOverrideRequestBody$inboundSchema: z.ZodType<V2RatelimitSetOverrideRequestBody, z.ZodTypeDef, unknown>;
/** @internal */
export type V2RatelimitSetOverrideRequestBody$Outbound = {
    namespaceId?: string | undefined;
    namespaceName?: string | undefined;
    duration: number;
    identifier: string;
    limit: number;
};
/** @internal */
export declare const V2RatelimitSetOverrideRequestBody$outboundSchema: z.ZodType<V2RatelimitSetOverrideRequestBody$Outbound, z.ZodTypeDef, V2RatelimitSetOverrideRequestBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace V2RatelimitSetOverrideRequestBody$ {
    /** @deprecated use `V2RatelimitSetOverrideRequestBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<V2RatelimitSetOverrideRequestBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `V2RatelimitSetOverrideRequestBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<V2RatelimitSetOverrideRequestBody$Outbound, z.ZodTypeDef, V2RatelimitSetOverrideRequestBody>;
    /** @deprecated use `V2RatelimitSetOverrideRequestBody$Outbound` instead. */
    type Outbound = V2RatelimitSetOverrideRequestBody$Outbound;
}
export declare function v2RatelimitSetOverrideRequestBodyToJSON(v2RatelimitSetOverrideRequestBody: V2RatelimitSetOverrideRequestBody): string;
export declare function v2RatelimitSetOverrideRequestBodyFromJSON(jsonString: string): SafeParseResult<V2RatelimitSetOverrideRequestBody, SDKValidationError>;
//# sourceMappingURL=v2ratelimitsetoverriderequestbody.d.ts.map