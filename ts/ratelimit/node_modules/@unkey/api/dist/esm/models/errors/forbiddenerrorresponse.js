/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import * as components from "../components/index.js";
export class ForbiddenErrorResponse extends Error {
    constructor(err) {
        const message = "message" in err && typeof err.message === "string"
            ? err.message
            : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;
        this.meta = err.meta;
        this.error = err.error;
        this.name = "ForbiddenErrorResponse";
    }
}
/** @internal */
export const ForbiddenErrorResponse$inboundSchema = z.object({
    meta: components.Meta$inboundSchema,
    error: components.BaseError$inboundSchema,
})
    .transform((v) => {
    return new ForbiddenErrorResponse(v);
});
/** @internal */
export const ForbiddenErrorResponse$outboundSchema = z.instanceof(ForbiddenErrorResponse)
    .transform(v => v.data$)
    .pipe(z.object({
    meta: components.Meta$outboundSchema,
    error: components.BaseError$outboundSchema,
}));
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ForbiddenErrorResponse$;
(function (ForbiddenErrorResponse$) {
    /** @deprecated use `ForbiddenErrorResponse$inboundSchema` instead. */
    ForbiddenErrorResponse$.inboundSchema = ForbiddenErrorResponse$inboundSchema;
    /** @deprecated use `ForbiddenErrorResponse$outboundSchema` instead. */
    ForbiddenErrorResponse$.outboundSchema = ForbiddenErrorResponse$outboundSchema;
})(ForbiddenErrorResponse$ || (ForbiddenErrorResponse$ = {}));
//# sourceMappingURL=forbiddenerrorresponse.js.map