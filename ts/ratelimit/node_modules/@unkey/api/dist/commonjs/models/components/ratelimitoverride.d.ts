import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type RatelimitOverride = {
    /**
     * The id of the namespace.
     */
    namespaceId: string;
    /**
     * The id of the override.
     */
    overrideId: string;
    /**
     * The duration in milliseconds for the rate limit window.
     */
    duration: number;
    /**
     * Identifier of your user, this can be their userId, an email, an ip or anything else. Wildcards ( * ) can be used to match multiple identifiers, More info can be found at https://www.unkey.com/docs/ratelimiting/overrides#wildcard-rules
     */
    identifier: string;
    /**
     * The maximum number of requests allowed.
     */
    limit: number;
};
/** @internal */
export declare const RatelimitOverride$inboundSchema: z.ZodType<RatelimitOverride, z.ZodTypeDef, unknown>;
/** @internal */
export type RatelimitOverride$Outbound = {
    namespaceId: string;
    overrideId: string;
    duration: number;
    identifier: string;
    limit: number;
};
/** @internal */
export declare const RatelimitOverride$outboundSchema: z.ZodType<RatelimitOverride$Outbound, z.ZodTypeDef, RatelimitOverride>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RatelimitOverride$ {
    /** @deprecated use `RatelimitOverride$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RatelimitOverride, z.ZodTypeDef, unknown>;
    /** @deprecated use `RatelimitOverride$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RatelimitOverride$Outbound, z.ZodTypeDef, RatelimitOverride>;
    /** @deprecated use `RatelimitOverride$Outbound` instead. */
    type Outbound = RatelimitOverride$Outbound;
}
export declare function ratelimitOverrideToJSON(ratelimitOverride: RatelimitOverride): string;
export declare function ratelimitOverrideFromJSON(jsonString: string): SafeParseResult<RatelimitOverride, SDKValidationError>;
//# sourceMappingURL=ratelimitoverride.d.ts.map