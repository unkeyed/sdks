import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type Meta = {
    /**
     * A unique id for this request. Please always provide this to support.
     */
    requestId: string;
};
/** @internal */
export declare const Meta$inboundSchema: z.ZodType<Meta, z.ZodTypeDef, unknown>;
/** @internal */
export type Meta$Outbound = {
    requestId: string;
};
/** @internal */
export declare const Meta$outboundSchema: z.ZodType<Meta$Outbound, z.ZodTypeDef, Meta>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Meta$ {
    /** @deprecated use `Meta$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Meta, z.ZodTypeDef, unknown>;
    /** @deprecated use `Meta$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Meta$Outbound, z.ZodTypeDef, Meta>;
    /** @deprecated use `Meta$Outbound` instead. */
    type Outbound = Meta$Outbound;
}
export declare function metaToJSON(meta: Meta): string;
export declare function metaFromJSON(jsonString: string): SafeParseResult<Meta, SDKValidationError>;
//# sourceMappingURL=meta.d.ts.map