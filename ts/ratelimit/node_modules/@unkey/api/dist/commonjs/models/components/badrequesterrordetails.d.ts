import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { ValidationError, ValidationError$Outbound } from "./validationerror.js";
export type BadRequestErrorDetails = {
    /**
     * A human-readable explanation specific to this occurrence of the problem.
     */
    detail: string;
    /**
     * A URI reference that identifies the specific occurrence of the problem.
     */
    instance?: string | undefined;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * A short, human-readable summary of the problem type. This value should not change between occurrences of the error.
     */
    title: string;
    /**
     * A URI reference to human-readable documentation for the error.
     */
    type: string;
    /**
     * Optional list of individual error details
     */
    errors: Array<ValidationError>;
};
/** @internal */
export declare const BadRequestErrorDetails$inboundSchema: z.ZodType<BadRequestErrorDetails, z.ZodTypeDef, unknown>;
/** @internal */
export type BadRequestErrorDetails$Outbound = {
    detail: string;
    instance?: string | undefined;
    status: number;
    title: string;
    type: string;
    errors: Array<ValidationError$Outbound>;
};
/** @internal */
export declare const BadRequestErrorDetails$outboundSchema: z.ZodType<BadRequestErrorDetails$Outbound, z.ZodTypeDef, BadRequestErrorDetails>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace BadRequestErrorDetails$ {
    /** @deprecated use `BadRequestErrorDetails$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BadRequestErrorDetails, z.ZodTypeDef, unknown>;
    /** @deprecated use `BadRequestErrorDetails$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BadRequestErrorDetails$Outbound, z.ZodTypeDef, BadRequestErrorDetails>;
    /** @deprecated use `BadRequestErrorDetails$Outbound` instead. */
    type Outbound = BadRequestErrorDetails$Outbound;
}
export declare function badRequestErrorDetailsToJSON(badRequestErrorDetails: BadRequestErrorDetails): string;
export declare function badRequestErrorDetailsFromJSON(jsonString: string): SafeParseResult<BadRequestErrorDetails, SDKValidationError>;
//# sourceMappingURL=badrequesterrordetails.d.ts.map