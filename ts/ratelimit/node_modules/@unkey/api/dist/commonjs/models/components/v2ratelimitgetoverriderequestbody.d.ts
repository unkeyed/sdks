import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * Gets the configuration of an existing override.
 */
export type V2RatelimitGetOverrideRequestBody = {
    /**
     * The id of the namespace. Either namespaceId or namespaceName must be provided
     */
    namespaceId?: string | undefined;
    /**
     * The name of the namespace. Either namespaceId or namespaceName must be provided
     */
    namespaceName?: string | undefined;
    /**
     * Identifier of your user, this can be their userId, an email, an ip or anything else. Wildcards ( * ) can be used to match multiple identifiers, More info can be found at https://www.unkey.com/docs/ratelimiting/overrides#wildcard-rules
     */
    identifier: string;
};
/** @internal */
export declare const V2RatelimitGetOverrideRequestBody$inboundSchema: z.ZodType<V2RatelimitGetOverrideRequestBody, z.ZodTypeDef, unknown>;
/** @internal */
export type V2RatelimitGetOverrideRequestBody$Outbound = {
    namespaceId?: string | undefined;
    namespaceName?: string | undefined;
    identifier: string;
};
/** @internal */
export declare const V2RatelimitGetOverrideRequestBody$outboundSchema: z.ZodType<V2RatelimitGetOverrideRequestBody$Outbound, z.ZodTypeDef, V2RatelimitGetOverrideRequestBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace V2RatelimitGetOverrideRequestBody$ {
    /** @deprecated use `V2RatelimitGetOverrideRequestBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<V2RatelimitGetOverrideRequestBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `V2RatelimitGetOverrideRequestBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<V2RatelimitGetOverrideRequestBody$Outbound, z.ZodTypeDef, V2RatelimitGetOverrideRequestBody>;
    /** @deprecated use `V2RatelimitGetOverrideRequestBody$Outbound` instead. */
    type Outbound = V2RatelimitGetOverrideRequestBody$Outbound;
}
export declare function v2RatelimitGetOverrideRequestBodyToJSON(v2RatelimitGetOverrideRequestBody: V2RatelimitGetOverrideRequestBody): string;
export declare function v2RatelimitGetOverrideRequestBodyFromJSON(jsonString: string): SafeParseResult<V2RatelimitGetOverrideRequestBody, SDKValidationError>;
//# sourceMappingURL=v2ratelimitgetoverriderequestbody.d.ts.map