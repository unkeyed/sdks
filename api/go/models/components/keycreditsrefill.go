// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// KeyCreditsRefillInterval - How often credits are automatically refilled.
type KeyCreditsRefillInterval string

const (
	KeyCreditsRefillIntervalDaily   KeyCreditsRefillInterval = "daily"
	KeyCreditsRefillIntervalMonthly KeyCreditsRefillInterval = "monthly"
)

func (e KeyCreditsRefillInterval) ToPointer() *KeyCreditsRefillInterval {
	return &e
}
func (e *KeyCreditsRefillInterval) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "daily":
		fallthrough
	case "monthly":
		*e = KeyCreditsRefillInterval(v)
		return nil
	default:
		return fmt.Errorf("invalid value for KeyCreditsRefillInterval: %v", v)
	}
}

// KeyCreditsRefill - Configuration for automatic credit refill behavior.
type KeyCreditsRefill struct {
	// How often credits are automatically refilled.
	Interval KeyCreditsRefillInterval `json:"interval"`
	// Number of credits to add during each refill cycle.
	Amount int64 `json:"amount"`
	// Day of the month for monthly refills (1-31).
	// Only required when interval is 'monthly'.
	// For days beyond the month's length, refill occurs on the last day of the month.
	//
	RefillDay *int64 `json:"refillDay,omitempty"`
}

func (k *KeyCreditsRefill) GetInterval() KeyCreditsRefillInterval {
	if k == nil {
		return KeyCreditsRefillInterval("")
	}
	return k.Interval
}

func (k *KeyCreditsRefill) GetAmount() int64 {
	if k == nil {
		return 0
	}
	return k.Amount
}

func (k *KeyCreditsRefill) GetRefillDay() *int64 {
	if k == nil {
		return nil
	}
	return k.RefillDay
}
