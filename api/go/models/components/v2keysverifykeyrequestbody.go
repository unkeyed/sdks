// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

type V2KeysVerifyKeyRequestBody struct {
	// The API key to verify, exactly as provided by your user.
	// Include any prefix - even small changes will cause verification to fail.
	//
	Key string `json:"key"`
	// Attaches metadata tags for analytics and monitoring without affecting verification outcomes.
	// Enables segmentation of API usage in dashboards by endpoint, client version, region, or custom dimensions.
	// Use 'key=value' format for compatibility with most analytics tools and clear categorization.
	// Avoid including sensitive data in tags as they may appear in logs and analytics reports.
	//
	Tags []string `json:"tags,omitempty"`
	// Checks if the key has the specified permission(s) using a query syntax.
	// Supports single permissions, logical operators (AND, OR), and parentheses for grouping.
	// Examples:
	// - Single permission: "documents.read"
	// - Multiple permissions: "documents.read AND documents.write"
	// - Complex queries: "(documents.read OR documents.write) AND users.view"
	// Verification fails if the key lacks the required permissions through direct assignment or role inheritance.
	//
	Permissions *string `json:"permissions,omitempty"`
	// Controls credit consumption for usage-based billing and quota enforcement.
	// Omitting this field uses the default cost of 1 credit per verification.
	// Credits provide globally consistent usage tracking, essential for paid APIs with strict quotas.
	//
	Credits *KeysVerifyKeyCredits `json:"credits,omitempty"`
	// Enforces time-based rate limiting during verification to prevent abuse and ensure fair usage.
	// Omitting this field skips rate limit checks entirely, relying only on configured key rate limits.
	// Multiple rate limits can be checked simultaneously, each with different costs and temporary overrides.
	// Rate limit checks are optimized for performance but may allow brief bursts during high concurrency.
	//
	Ratelimits []KeysVerifyKeyRatelimit `json:"ratelimits,omitempty"`
}

func (o *V2KeysVerifyKeyRequestBody) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *V2KeysVerifyKeyRequestBody) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *V2KeysVerifyKeyRequestBody) GetPermissions() *string {
	if o == nil {
		return nil
	}
	return o.Permissions
}

func (o *V2KeysVerifyKeyRequestBody) GetCredits() *KeysVerifyKeyCredits {
	if o == nil {
		return nil
	}
	return o.Credits
}

func (o *V2KeysVerifyKeyRequestBody) GetRatelimits() []KeysVerifyKeyRatelimit {
	if o == nil {
		return nil
	}
	return o.Ratelimits
}
