// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/unkeyed/sdks/api/go/v2/internal/utils"
)

type KeysVerifyKeyRatelimit struct {
	// References an existing ratelimit by its name. Key Ratelimits will take precedence over identifier-based limits.
	Name string `json:"name"`
	// Optionally override how expensive this operation is and how many tokens are deducted from the current limit.
	Cost *int64 `default:"1" json:"cost"`
	// Optionally override the maximum number of requests allowed within the specified interval.
	Limit *int64 `json:"limit,omitempty"`
	// Optionally override the duration of the rate limit window duration.
	Duration *int64 `json:"duration,omitempty"`
}

func (k KeysVerifyKeyRatelimit) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(k, "", false)
}

func (k *KeysVerifyKeyRatelimit) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &k, "", false, []string{"name"}); err != nil {
		return err
	}
	return nil
}

func (o *KeysVerifyKeyRatelimit) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *KeysVerifyKeyRatelimit) GetCost() *int64 {
	if o == nil {
		return nil
	}
	return o.Cost
}

func (o *KeysVerifyKeyRatelimit) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *KeysVerifyKeyRatelimit) GetDuration() *int64 {
	if o == nil {
		return nil
	}
	return o.Duration
}
