// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/unkeyed/sdks/api/go/v2/internal/utils"
)

type V2ApisListKeysRequestBody struct {
	// The API namespace whose keys you want to list.
	// Returns all keys in this API, subject to pagination and filters.
	//
	APIID string `json:"apiId"`
	// Maximum number of keys to return per request.
	// Balance between response size and number of pagination calls needed.
	//
	Limit *int64 `default:"100" json:"limit"`
	// Pagination cursor from previous response to fetch next page.
	// Use when `hasMore: true` in previous response.
	//
	Cursor *string `json:"cursor,omitempty"`
	// Filter keys by external ID to find keys for a specific user or entity.
	// Must exactly match the externalId set during key creation.
	//
	ExternalID *string `json:"externalId,omitempty"`
	// When true, attempts to include the plaintext key value in the response. SECURITY WARNING:
	// - This requires special permissions on the calling root key
	// - Only works for keys created with 'recoverable: true'
	// - Exposes sensitive key material in the response
	// - Should only be used in secure administrative contexts
	// - Never enable this in user-facing applications
	Decrypt *bool `default:"false" json:"decrypt"`
	// EXPERIMENTAL: Skip the cache and fetch the keys directly from the database. This ensures you see the most recent state, including keys created moments ago. Use this when:
	// - You've just created a key and need to display it immediately
	// - You need absolute certainty about the current key state
	// - You're debugging cache consistency issues
	//
	// This parameter comes with a performance cost and should be used sparingly.
	RevalidateKeysCache *bool `default:"false" json:"revalidateKeysCache"`
}

func (v V2ApisListKeysRequestBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V2ApisListKeysRequestBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *V2ApisListKeysRequestBody) GetAPIID() string {
	if o == nil {
		return ""
	}
	return o.APIID
}

func (o *V2ApisListKeysRequestBody) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *V2ApisListKeysRequestBody) GetCursor() *string {
	if o == nil {
		return nil
	}
	return o.Cursor
}

func (o *V2ApisListKeysRequestBody) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *V2ApisListKeysRequestBody) GetDecrypt() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypt
}

func (o *V2ApisListKeysRequestBody) GetRevalidateKeysCache() *bool {
	if o == nil {
		return nil
	}
	return o.RevalidateKeysCache
}
