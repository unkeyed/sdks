// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/unkeyed/sdks/api/go/v2/internal/utils"
)

type V2RatelimitLimitRequestBody struct {
	// The id or name of the namespace.
	Namespace string `json:"namespace"`
	// Sets how much of the rate limit quota this request consumes, enabling weighted rate limiting.
	// Use higher values for resource-intensive operations and 0 for tracking without limiting.
	// When accumulated cost exceeds the limit within the duration window, subsequent requests are rejected.
	// Essential for implementing fair usage policies and preventing resource abuse through expensive operations.
	//
	Cost *int64 `default:"1" json:"cost"`
	// Sets the rate limit window duration in milliseconds after which the counter resets.
	// Shorter durations enable faster recovery but may be less effective against sustained abuse.
	// Common values include 60000 (1 minute), 3600000 (1 hour), and 86400000 (24 hours).
	// Balance user experience with protection needs when choosing window sizes.
	//
	Duration int64 `json:"duration"`
	// Defines the scope of rate limiting by identifying the entity being limited.
	// Use user IDs for per-user limits, IP addresses for anonymous limiting, or API key IDs for per-key limits.
	// Accepts letters, numbers, underscores, dots, colons, slashes, and hyphens for flexible identifier formats.
	// The same identifier can be used across different namespaces to apply multiple rate limit types.
	// Choose identifiers that provide appropriate granularity for your rate limiting strategy.
	//
	Identifier string `json:"identifier"`
	// Sets the maximum operations allowed within the duration window before requests are rejected.
	// When this limit is reached, subsequent requests fail with `RATE_LIMITED` until the window resets.
	// Balance user experience with resource protection when setting limits for different user tiers.
	// Consider system capacity, business requirements, and fair usage policies in limit determination.
	//
	Limit int64 `json:"limit"`
}

func (v V2RatelimitLimitRequestBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V2RatelimitLimitRequestBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, []string{"namespace", "duration", "identifier", "limit"}); err != nil {
		return err
	}
	return nil
}

func (o *V2RatelimitLimitRequestBody) GetNamespace() string {
	if o == nil {
		return ""
	}
	return o.Namespace
}

func (o *V2RatelimitLimitRequestBody) GetCost() *int64 {
	if o == nil {
		return nil
	}
	return o.Cost
}

func (o *V2RatelimitLimitRequestBody) GetDuration() int64 {
	if o == nil {
		return 0
	}
	return o.Duration
}

func (o *V2RatelimitLimitRequestBody) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *V2RatelimitLimitRequestBody) GetLimit() int64 {
	if o == nil {
		return 0
	}
	return o.Limit
}
