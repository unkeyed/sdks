// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/unkeyed/sdks/go/api/v2/internal/utils"
)

type V2RatelimitLimitRequestBody struct {
	// The namespace name for the rate limit.
	Namespace string `json:"namespace"`
	// The cost of the request. Defaults to 1 if not provided.
	Cost *int64 `default:"1" json:"cost"`
	// The duration in milliseconds for the rate limit window.
	Duration int64 `json:"duration"`
	// The identifier for the rate limit.
	Identifier string `json:"identifier"`
	// The maximum number of requests allowed.
	Limit int64 `json:"limit"`
}

func (v V2RatelimitLimitRequestBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V2RatelimitLimitRequestBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *V2RatelimitLimitRequestBody) GetNamespace() string {
	if o == nil {
		return ""
	}
	return o.Namespace
}

func (o *V2RatelimitLimitRequestBody) GetCost() *int64 {
	if o == nil {
		return nil
	}
	return o.Cost
}

func (o *V2RatelimitLimitRequestBody) GetDuration() int64 {
	if o == nil {
		return 0
	}
	return o.Duration
}

func (o *V2RatelimitLimitRequestBody) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *V2RatelimitLimitRequestBody) GetLimit() int64 {
	if o == nil {
		return 0
	}
	return o.Limit
}
