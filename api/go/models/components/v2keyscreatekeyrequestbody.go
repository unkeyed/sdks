// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/unkeyed/sdks/api/go/v2/internal/utils"
)

type V2KeysCreateKeyRequestBody struct {
	// The API namespace this key belongs to.
	// Keys from different APIs cannot access each other.
	//
	APIID string `json:"apiId"`
	// Adds a visual identifier to the beginning of the generated key for easier recognition in logs and dashboards.
	// The prefix becomes part of the actual key string (e.g., `prod_xxxxxxxxx`).
	// Avoid using sensitive information in prefixes as they may appear in logs and error messages.
	//
	Prefix *string `json:"prefix,omitempty"`
	// Sets a human-readable identifier for internal organization and dashboard display.
	// Never exposed to end users, only visible in management interfaces and API responses.
	// Avoid generic names like "API Key" when managing multiple keys for the same user or service.
	//
	Name *string `json:"name,omitempty"`
	// Controls the cryptographic strength of the generated key in bytes.
	// Higher values increase security but result in longer keys that may be more annoying to handle.
	// The default 16 bytes provides 2^128 possible combinations, sufficient for most applications.
	// Consider 32 bytes for highly sensitive APIs, but avoid values above 64 bytes unless specifically required.
	//
	ByteLength *int64 `default:"16" json:"byteLength"`
	// Links this key to a user or entity in your system using your own identifier.
	// Returned during verification to identify the key owner without additional database lookups.
	// Essential for user-specific analytics, billing, and multi-tenant key management.
	// Use your primary user ID, organization ID, or tenant ID for best results.
	// Accepts letters, numbers, underscores, dots, and hyphens for flexible identifier formats.
	//
	ExternalID *string `json:"externalId,omitempty"`
	// Stores arbitrary JSON metadata returned during key verification for contextual information.
	// Eliminates additional database lookups during verification, improving performance for stateless services.
	// Avoid storing sensitive data here as it's returned in verification responses.
	// Large metadata objects increase verification latency and should stay under 10KB total size.
	//
	Meta map[string]any `json:"meta,omitempty"`
	// Assigns existing roles to this key for permission management through role-based access control.
	// Roles must already exist in your workspace before assignment.
	// During verification, all permissions from assigned roles are checked against requested permissions.
	// Roles provide a convenient way to group permissions and apply consistent access patterns across multiple keys.
	//
	Roles []string `json:"roles,omitempty"`
	// Grants specific permissions directly to this key without requiring role membership.
	// Wildcard permissions like `documents.*` grant access to all sub-permissions including `documents.read` and `documents.write`.
	// Direct permissions supplement any permissions inherited from assigned roles.
	//
	Permissions []string `json:"permissions,omitempty"`
	// Sets when this key automatically expires as a Unix timestamp in milliseconds.
	// Verification fails with code=EXPIRED immediately after this time passes.
	// Omitting this field creates a permanent key that never expires.
	//
	// Avoid setting timestamps in the past as they immediately invalidate the key.
	// Keys expire based on server time, not client time, which prevents timezone-related issues.
	// Essential for trial periods, temporary access, and security compliance requiring key rotation.
	//
	Expires *int64 `json:"expires,omitempty"`
	// Credit configuration and remaining balance for this key.
	Credits *KeyCreditsData `json:"credits,omitempty"`
	// Defines time-based rate limits that protect against abuse by controlling request frequency.
	// Unlike credits which track total usage, rate limits reset automatically after each window expires.
	// Multiple rate limits can control different operation types with separate thresholds and windows.
	// Essential for preventing API abuse while maintaining good performance for legitimate usage.
	//
	Ratelimits []RatelimitRequest `json:"ratelimits,omitempty"`
	// Controls whether the key is active immediately upon creation.
	// When set to `false`, the key exists but all verification attempts fail with `code=DISABLED`.
	// Useful for pre-creating keys that will be activated later or for keys requiring manual approval.
	// Most keys should be created with `enabled=true` for immediate use.
	//
	Enabled *bool `default:"true" json:"enabled"`
	// Controls whether the plaintext key is stored in an encrypted vault for later retrieval.
	// When true, allows recovering the actual key value using keys.getKey with decrypt=true.
	// When false, the key value cannot be retrieved after creation for maximum security.
	// Only enable for development keys or when key recovery is absolutely necessary.
	//
	Recoverable *bool `default:"false" json:"recoverable"`
}

func (v V2KeysCreateKeyRequestBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V2KeysCreateKeyRequestBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, []string{"apiId"}); err != nil {
		return err
	}
	return nil
}

func (o *V2KeysCreateKeyRequestBody) GetAPIID() string {
	if o == nil {
		return ""
	}
	return o.APIID
}

func (o *V2KeysCreateKeyRequestBody) GetPrefix() *string {
	if o == nil {
		return nil
	}
	return o.Prefix
}

func (o *V2KeysCreateKeyRequestBody) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *V2KeysCreateKeyRequestBody) GetByteLength() *int64 {
	if o == nil {
		return nil
	}
	return o.ByteLength
}

func (o *V2KeysCreateKeyRequestBody) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *V2KeysCreateKeyRequestBody) GetMeta() map[string]any {
	if o == nil {
		return nil
	}
	return o.Meta
}

func (o *V2KeysCreateKeyRequestBody) GetRoles() []string {
	if o == nil {
		return nil
	}
	return o.Roles
}

func (o *V2KeysCreateKeyRequestBody) GetPermissions() []string {
	if o == nil {
		return nil
	}
	return o.Permissions
}

func (o *V2KeysCreateKeyRequestBody) GetExpires() *int64 {
	if o == nil {
		return nil
	}
	return o.Expires
}

func (o *V2KeysCreateKeyRequestBody) GetCredits() *KeyCreditsData {
	if o == nil {
		return nil
	}
	return o.Credits
}

func (o *V2KeysCreateKeyRequestBody) GetRatelimits() []RatelimitRequest {
	if o == nil {
		return nil
	}
	return o.Ratelimits
}

func (o *V2KeysCreateKeyRequestBody) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *V2KeysCreateKeyRequestBody) GetRecoverable() *bool {
	if o == nil {
		return nil
	}
	return o.Recoverable
}
