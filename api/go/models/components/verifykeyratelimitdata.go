// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

type VerifyKeyRatelimitData struct {
	// Whether the rate limit was exceeded.
	Exceeded bool `json:"exceeded"`
	// Unique identifier for this rate limit configuration.
	ID string `json:"id"`
	// Human-readable name for this rate limit.
	Name string `json:"name"`
	// Maximum requests allowed within the time window.
	Limit int64 `json:"limit"`
	// Rate limit window duration in milliseconds.
	Duration int64 `json:"duration"`
	// Rate limit reset duration in milliseconds.
	Reset int64 `json:"reset"`
	// Rate limit remaining requests within the time window.
	Remaining int64 `json:"remaining"`
	// Whether this rate limit should be automatically applied when verifying keys.
	// When true, we will automatically apply this limit during verification without it being explicitly listed.
	//
	AutoApply bool `json:"autoApply"`
}

func (v *VerifyKeyRatelimitData) GetExceeded() bool {
	if v == nil {
		return false
	}
	return v.Exceeded
}

func (v *VerifyKeyRatelimitData) GetID() string {
	if v == nil {
		return ""
	}
	return v.ID
}

func (v *VerifyKeyRatelimitData) GetName() string {
	if v == nil {
		return ""
	}
	return v.Name
}

func (v *VerifyKeyRatelimitData) GetLimit() int64 {
	if v == nil {
		return 0
	}
	return v.Limit
}

func (v *VerifyKeyRatelimitData) GetDuration() int64 {
	if v == nil {
		return 0
	}
	return v.Duration
}

func (v *VerifyKeyRatelimitData) GetReset() int64 {
	if v == nil {
		return 0
	}
	return v.Reset
}

func (v *VerifyKeyRatelimitData) GetRemaining() int64 {
	if v == nil {
		return 0
	}
	return v.Remaining
}

func (v *VerifyKeyRatelimitData) GetAutoApply() bool {
	if v == nil {
		return false
	}
	return v.AutoApply
}
