// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// Code - A machine-readable code indicating the verification status
// or failure reason. Values: `VALID` (key is valid and passed all checks), `NOT_FOUND` (key doesn't
// exist or belongs to wrong API), `FORBIDDEN` (key lacks required permissions), `INSUFFICIENT_PERMISSIONS`
// (key lacks specific required permissions for this request), `INSUFFICIENT_CREDITS`
// (key has no remaining credits), `USAGE_EXCEEDED` (key exceeded usage limits), `RATE_LIMITED` (key exceeded rate limits), `DISABLED` (key was explicitly disabled),
// `EXPIRED` (key has passed its expiration date).
type Code string

const (
	CodeValid                   Code = "VALID"
	CodeNotFound                Code = "NOT_FOUND"
	CodeForbidden               Code = "FORBIDDEN"
	CodeInsufficientPermissions Code = "INSUFFICIENT_PERMISSIONS"
	CodeInsufficientCredits     Code = "INSUFFICIENT_CREDITS"
	CodeUsageExceeded           Code = "USAGE_EXCEEDED"
	CodeRateLimited             Code = "RATE_LIMITED"
	CodeDisabled                Code = "DISABLED"
	CodeExpired                 Code = "EXPIRED"
)

func (e Code) ToPointer() *Code {
	return &e
}
func (e *Code) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "VALID":
		fallthrough
	case "NOT_FOUND":
		fallthrough
	case "FORBIDDEN":
		fallthrough
	case "INSUFFICIENT_PERMISSIONS":
		fallthrough
	case "INSUFFICIENT_CREDITS":
		fallthrough
	case "USAGE_EXCEEDED":
		fallthrough
	case "RATE_LIMITED":
		fallthrough
	case "DISABLED":
		fallthrough
	case "EXPIRED":
		*e = Code(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Code: %v", v)
	}
}

type V2KeysVerifyKeyResponseData struct {
	// The primary verification result. If true, the key is valid
	// and can be used. If false, check the 'code' field to understand why verification
	// failed. Your application should always check this field first before proceeding.
	//
	Valid bool `json:"valid"`
	// A machine-readable code indicating the verification status
	// or failure reason. Values: `VALID` (key is valid and passed all checks), `NOT_FOUND` (key doesn't
	// exist or belongs to wrong API), `FORBIDDEN` (key lacks required permissions), `INSUFFICIENT_PERMISSIONS`
	// (key lacks specific required permissions for this request), `INSUFFICIENT_CREDITS`
	// (key has no remaining credits), `USAGE_EXCEEDED` (key exceeded usage limits), `RATE_LIMITED` (key exceeded rate limits), `DISABLED` (key was explicitly disabled),
	// `EXPIRED` (key has passed its expiration date).
	//
	Code Code `json:"code"`
	// The unique identifier of the verified key in Unkey's system.
	// Use this ID for operations like updating or revoking the key. This field
	// is returned for both valid and invalid keys (except when `code=NOT_FOUND`).
	//
	KeyID *string `json:"keyId,omitempty"`
	// The human-readable name assigned to this key during creation.
	// This is useful for displaying in logs or admin interfaces to identify
	// the key's purpose.
	//
	Name *string `json:"name,omitempty"`
	// Custom metadata associated with the key. This can include any
	// JSON-serializable data you stored with the key during creation or updates,
	// such as plan information, feature flags, or user details. Use this to
	// avoid additional database lookups for contextual information needed during
	// API calls.
	//
	Meta map[string]any `json:"meta,omitempty"`
	// Unix timestamp (in milliseconds) when the key will expire.
	// If null or not present, the key has no expiration. You can use this to
	// warn users about upcoming expirations or to understand the validity period.
	//
	Expires *int64 `json:"expires,omitempty"`
	// The number of requests/credits remaining for this key. If null
	// or not present, the key has unlimited usage. This value decreases with
	// each verification (based on the 'cost' parameter) unless explicit credit
	// refills are configured.
	//
	Credits *int `json:"credits,omitempty"`
	// Indicates if the key is currently enabled. Disabled keys will
	// always fail verification with `code=DISABLED`. This is useful for implementing
	// temporary suspensions without deleting the key.
	//
	Enabled *bool `json:"enabled,omitempty"`
	// A list of all permission names assigned to this key, either
	// directly or through roles. These permissions determine what actions the
	// key can perform. Only returned when permissions were checked during verification
	// or when the key fails with `code=FORBIDDEN`.
	//
	Permissions []string `json:"permissions,omitempty"`
	// A list of all role names assigned to this key. Roles are collections
	// of permissions that grant access to specific functionality. Only returned
	// when permissions were checked during verification.
	//
	Roles      []string                 `json:"roles,omitempty"`
	Identity   *Identity                `json:"identity,omitempty"`
	Ratelimits []VerifyKeyRatelimitData `json:"ratelimits,omitempty"`
}

func (o *V2KeysVerifyKeyResponseData) GetValid() bool {
	if o == nil {
		return false
	}
	return o.Valid
}

func (o *V2KeysVerifyKeyResponseData) GetCode() Code {
	if o == nil {
		return Code("")
	}
	return o.Code
}

func (o *V2KeysVerifyKeyResponseData) GetKeyID() *string {
	if o == nil {
		return nil
	}
	return o.KeyID
}

func (o *V2KeysVerifyKeyResponseData) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *V2KeysVerifyKeyResponseData) GetMeta() map[string]any {
	if o == nil {
		return nil
	}
	return o.Meta
}

func (o *V2KeysVerifyKeyResponseData) GetExpires() *int64 {
	if o == nil {
		return nil
	}
	return o.Expires
}

func (o *V2KeysVerifyKeyResponseData) GetCredits() *int {
	if o == nil {
		return nil
	}
	return o.Credits
}

func (o *V2KeysVerifyKeyResponseData) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *V2KeysVerifyKeyResponseData) GetPermissions() []string {
	if o == nil {
		return nil
	}
	return o.Permissions
}

func (o *V2KeysVerifyKeyResponseData) GetRoles() []string {
	if o == nil {
		return nil
	}
	return o.Roles
}

func (o *V2KeysVerifyKeyResponseData) GetIdentity() *Identity {
	if o == nil {
		return nil
	}
	return o.Identity
}

func (o *V2KeysVerifyKeyResponseData) GetRatelimits() []VerifyKeyRatelimitData {
	if o == nil {
		return nil
	}
	return o.Ratelimits
}
