// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/unkeyed/sdks/api/go/v2/internal/utils"
)

type V2PermissionsListPermissionsRequestBody struct {
	// Pagination cursor from a previous response to fetch the next page of permissions.
	// Include this value when you need to retrieve additional permissions beyond the initial response.
	// Each response containing more results than the requested limit includes a cursor for subsequent pages.
	//
	// Leave empty or omit this field to start from the beginning of the permission list.
	// Cursors are temporary and may expire - always handle cases where a cursor becomes invalid.
	//
	Cursor *string `json:"cursor,omitempty"`
	// Maximum number of permissions to return in a single response.
	Limit *int64 `default:"100" json:"limit"`
}

func (v V2PermissionsListPermissionsRequestBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V2PermissionsListPermissionsRequestBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *V2PermissionsListPermissionsRequestBody) GetCursor() *string {
	if o == nil {
		return nil
	}
	return o.Cursor
}

func (o *V2PermissionsListPermissionsRequestBody) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}
