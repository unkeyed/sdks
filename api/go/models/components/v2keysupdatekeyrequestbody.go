// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

type V2KeysUpdateKeyRequestBody struct {
	// Specifies which key to update using the database identifier returned from `createKey`.
	// Do not confuse this with the actual API key string that users include in requests.
	//
	KeyID string `json:"keyId"`
	// Sets a human-readable name for internal organization and identification.
	// Omitting this field leaves the current name unchanged, while setting null removes it entirely.
	// Avoid generic names like "API Key" when managing multiple keys per user or service.
	//
	Name *string `json:"name,omitempty"`
	// Links this key to a user or entity in your system for ownership tracking during verification.
	// Omitting this field preserves the current association, while setting null disconnects the key from any identity.
	// Essential for user-specific analytics, billing, and key management across multiple users.
	// Supports letters, numbers, underscores, dots, and hyphens for flexible identifier formats.
	//
	ExternalID *string `json:"externalId,omitempty"`
	// Stores arbitrary JSON metadata returned during key verification.
	// Omitting this field preserves existing metadata, while setting null removes all metadata entirely.
	// Avoid storing sensitive data here as it's returned in verification responses.
	// Large metadata objects increase verification latency and should stay under 10KB total size.
	//
	Meta map[string]any `json:"meta,omitempty"`
	// Sets when this key automatically expires as a Unix timestamp in milliseconds.
	// Verification fails with code=EXPIRED immediately after this time passes.
	// Omitting this field preserves the current expiration, while setting null makes the key permanent.
	//
	// Avoid setting timestamps in the past as they immediately invalidate the key.
	// Keys expire based on server time, not client time, which prevents timezone-related issues.
	// Active sessions continue until their next verification attempt after expiry.
	//
	Expires *int64 `json:"expires,omitempty"`
	// Credit configuration and remaining balance for this key.
	Credits *UpdateKeyCreditsData `json:"credits,omitempty"`
	// Defines time-based rate limits that protect against abuse by controlling request frequency.
	// Omitting this field preserves existing rate limits, while setting null removes all rate limits.
	// Unlike credits which track total usage, rate limits reset automatically after each window expires.
	// Multiple rate limits can control different operation types with separate thresholds and windows.
	//
	Ratelimits []RatelimitRequest `json:"ratelimits,omitempty"`
	// Controls whether the key is currently active for verification requests.
	// When set to `false`, all verification attempts fail with `code=DISABLED` regardless of other settings.
	// Omitting this field preserves the current enabled status.
	// Useful for temporarily suspending access during billing issues, security incidents, or maintenance windows without losing key configuration.
	//
	Enabled     *bool    `json:"enabled,omitempty"`
	Roles       []string `json:"roles,omitempty"`
	Permissions []string `json:"permissions,omitempty"`
}

func (v *V2KeysUpdateKeyRequestBody) GetKeyID() string {
	if v == nil {
		return ""
	}
	return v.KeyID
}

func (v *V2KeysUpdateKeyRequestBody) GetName() *string {
	if v == nil {
		return nil
	}
	return v.Name
}

func (v *V2KeysUpdateKeyRequestBody) GetExternalID() *string {
	if v == nil {
		return nil
	}
	return v.ExternalID
}

func (v *V2KeysUpdateKeyRequestBody) GetMeta() map[string]any {
	if v == nil {
		return nil
	}
	return v.Meta
}

func (v *V2KeysUpdateKeyRequestBody) GetExpires() *int64 {
	if v == nil {
		return nil
	}
	return v.Expires
}

func (v *V2KeysUpdateKeyRequestBody) GetCredits() *UpdateKeyCreditsData {
	if v == nil {
		return nil
	}
	return v.Credits
}

func (v *V2KeysUpdateKeyRequestBody) GetRatelimits() []RatelimitRequest {
	if v == nil {
		return nil
	}
	return v.Ratelimits
}

func (v *V2KeysUpdateKeyRequestBody) GetEnabled() *bool {
	if v == nil {
		return nil
	}
	return v.Enabled
}

func (v *V2KeysUpdateKeyRequestBody) GetRoles() []string {
	if v == nil {
		return nil
	}
	return v.Roles
}

func (v *V2KeysUpdateKeyRequestBody) GetPermissions() []string {
	if v == nil {
		return nil
	}
	return v.Permissions
}
