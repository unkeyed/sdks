/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as components from "../components/index.js";
import { UnkeyError } from "./unkeyerror.js";

/**
 * Error response when an unexpected error occurs on the server. This indicates a problem with Unkey's systems rather than your request.
 *
 * @remarks
 *
 * When you encounter this error:
 * - The request ID in the response can help Unkey support investigate the issue
 * - The error is likely temporary and retrying may succeed
 * - If the error persists, contact Unkey support with the request ID
 */
export type InternalServerErrorResponseData = {
  /**
   * Metadata object included in every API response. This provides context about the request and is essential for debugging, audit trails, and support inquiries. The `requestId` is particularly important when troubleshooting issues with the Unkey support team.
   */
  meta: components.Meta;
  /**
   * Base error structure following Problem Details for HTTP APIs (RFC 7807). This provides a standardized way to carry machine-readable details of errors in HTTP response content.
   */
  error: components.BaseError;
};

/**
 * Error response when an unexpected error occurs on the server. This indicates a problem with Unkey's systems rather than your request.
 *
 * @remarks
 *
 * When you encounter this error:
 * - The request ID in the response can help Unkey support investigate the issue
 * - The error is likely temporary and retrying may succeed
 * - If the error persists, contact Unkey support with the request ID
 */
export class InternalServerErrorResponse extends UnkeyError {
  /**
   * Metadata object included in every API response. This provides context about the request and is essential for debugging, audit trails, and support inquiries. The `requestId` is particularly important when troubleshooting issues with the Unkey support team.
   */
  meta: components.Meta;
  /**
   * Base error structure following Problem Details for HTTP APIs (RFC 7807). This provides a standardized way to carry machine-readable details of errors in HTTP response content.
   */
  error: components.BaseError;

  /** The original data that was passed to this error instance. */
  data$: InternalServerErrorResponseData;

  constructor(
    err: InternalServerErrorResponseData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.meta = err.meta;
    this.error = err.error;

    this.name = "InternalServerErrorResponse";
  }
}

/** @internal */
export const InternalServerErrorResponse$inboundSchema: z.ZodType<
  InternalServerErrorResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  meta: components.Meta$inboundSchema,
  error: components.BaseError$inboundSchema,
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new InternalServerErrorResponse(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type InternalServerErrorResponse$Outbound = {
  meta: components.Meta$Outbound;
  error: components.BaseError$Outbound;
};

/** @internal */
export const InternalServerErrorResponse$outboundSchema: z.ZodType<
  InternalServerErrorResponse$Outbound,
  z.ZodTypeDef,
  InternalServerErrorResponse
> = z.instanceof(InternalServerErrorResponse)
  .transform(v => v.data$)
  .pipe(z.object({
    meta: components.Meta$outboundSchema,
    error: components.BaseError$outboundSchema,
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InternalServerErrorResponse$ {
  /** @deprecated use `InternalServerErrorResponse$inboundSchema` instead. */
  export const inboundSchema = InternalServerErrorResponse$inboundSchema;
  /** @deprecated use `InternalServerErrorResponse$outboundSchema` instead. */
  export const outboundSchema = InternalServerErrorResponse$outboundSchema;
  /** @deprecated use `InternalServerErrorResponse$Outbound` instead. */
  export type Outbound = InternalServerErrorResponse$Outbound;
}
