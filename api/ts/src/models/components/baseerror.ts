/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Base error structure following Problem Details for HTTP APIs (RFC 7807). This provides a standardized way to carry machine-readable details of errors in HTTP response content.
 */
export type BaseError = {
  /**
   * A human-readable explanation specific to this occurrence of the problem. This provides detailed information about what went wrong and potential remediation steps. The message is intended to be helpful for developers troubleshooting the issue.
   */
  detail: string;
  /**
   * HTTP status code that corresponds to this error. This will match the status code in the HTTP response. Common codes include `400` (Bad Request), `401` (Unauthorized), `403` (Forbidden), `404` (Not Found), `409` (Conflict), and `500` (Internal Server Error).
   */
  status: number;
  /**
   * A short, human-readable summary of the problem type. This remains constant from occurrence to occurrence of the same problem and should be used for programmatic handling.
   */
  title: string;
  /**
   * A URI reference that identifies the problem type. This provides a stable identifier for the error that can be used for documentation lookups and programmatic error handling. When followed, this URI should provide human-readable documentation for the problem type.
   */
  type: string;
};

/** @internal */
export const BaseError$inboundSchema: z.ZodType<
  BaseError,
  z.ZodTypeDef,
  unknown
> = z.object({
  detail: z.string(),
  status: z.number().int(),
  title: z.string(),
  type: z.string(),
});

/** @internal */
export type BaseError$Outbound = {
  detail: string;
  status: number;
  title: string;
  type: string;
};

/** @internal */
export const BaseError$outboundSchema: z.ZodType<
  BaseError$Outbound,
  z.ZodTypeDef,
  BaseError
> = z.object({
  detail: z.string(),
  status: z.number().int(),
  title: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BaseError$ {
  /** @deprecated use `BaseError$inboundSchema` instead. */
  export const inboundSchema = BaseError$inboundSchema;
  /** @deprecated use `BaseError$outboundSchema` instead. */
  export const outboundSchema = BaseError$outboundSchema;
  /** @deprecated use `BaseError$Outbound` instead. */
  export type Outbound = BaseError$Outbound;
}

export function baseErrorToJSON(baseError: BaseError): string {
  return JSON.stringify(BaseError$outboundSchema.parse(baseError));
}

export function baseErrorFromJSON(
  jsonString: string,
): SafeParseResult<BaseError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BaseError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BaseError' from JSON`,
  );
}
