/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * How often credits are automatically refilled.
 */
export const Interval = {
  Daily: "daily",
  Monthly: "monthly",
} as const;
/**
 * How often credits are automatically refilled.
 */
export type Interval = ClosedEnum<typeof Interval>;

/**
 * Configuration for automatic credit refill behavior.
 */
export type KeyCreditsRefill = {
  /**
   * How often credits are automatically refilled.
   */
  interval: Interval;
  /**
   * Number of credits to add during each refill cycle.
   */
  amount: number;
  /**
   * Day of the month for monthly refills (1-31).
   *
   * @remarks
   * Only required when interval is 'monthly'.
   * For days beyond the month's length, refill occurs on the last day of the month.
   */
  refillDay?: number | undefined;
};

/** @internal */
export const Interval$inboundSchema: z.ZodNativeEnum<typeof Interval> = z
  .nativeEnum(Interval);

/** @internal */
export const Interval$outboundSchema: z.ZodNativeEnum<typeof Interval> =
  Interval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Interval$ {
  /** @deprecated use `Interval$inboundSchema` instead. */
  export const inboundSchema = Interval$inboundSchema;
  /** @deprecated use `Interval$outboundSchema` instead. */
  export const outboundSchema = Interval$outboundSchema;
}

/** @internal */
export const KeyCreditsRefill$inboundSchema: z.ZodType<
  KeyCreditsRefill,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: Interval$inboundSchema,
  amount: z.number().int(),
  refillDay: z.number().int().optional(),
});

/** @internal */
export type KeyCreditsRefill$Outbound = {
  interval: string;
  amount: number;
  refillDay?: number | undefined;
};

/** @internal */
export const KeyCreditsRefill$outboundSchema: z.ZodType<
  KeyCreditsRefill$Outbound,
  z.ZodTypeDef,
  KeyCreditsRefill
> = z.object({
  interval: Interval$outboundSchema,
  amount: z.number().int(),
  refillDay: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KeyCreditsRefill$ {
  /** @deprecated use `KeyCreditsRefill$inboundSchema` instead. */
  export const inboundSchema = KeyCreditsRefill$inboundSchema;
  /** @deprecated use `KeyCreditsRefill$outboundSchema` instead. */
  export const outboundSchema = KeyCreditsRefill$outboundSchema;
  /** @deprecated use `KeyCreditsRefill$Outbound` instead. */
  export type Outbound = KeyCreditsRefill$Outbound;
}

export function keyCreditsRefillToJSON(
  keyCreditsRefill: KeyCreditsRefill,
): string {
  return JSON.stringify(
    KeyCreditsRefill$outboundSchema.parse(keyCreditsRefill),
  );
}

export function keyCreditsRefillFromJSON(
  jsonString: string,
): SafeParseResult<KeyCreditsRefill, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => KeyCreditsRefill$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'KeyCreditsRefill' from JSON`,
  );
}
