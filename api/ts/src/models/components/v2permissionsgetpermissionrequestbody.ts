/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V2PermissionsGetPermissionRequestBody = {
  /**
   * The unique identifier of the permission to retrieve. Must be a valid permission ID that begins with 'perm_' and exists within your workspace.
   *
   * @remarks
   */
  permission: string;
};

/** @internal */
export const V2PermissionsGetPermissionRequestBody$inboundSchema: z.ZodType<
  V2PermissionsGetPermissionRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  permission: z.string(),
});

/** @internal */
export type V2PermissionsGetPermissionRequestBody$Outbound = {
  permission: string;
};

/** @internal */
export const V2PermissionsGetPermissionRequestBody$outboundSchema: z.ZodType<
  V2PermissionsGetPermissionRequestBody$Outbound,
  z.ZodTypeDef,
  V2PermissionsGetPermissionRequestBody
> = z.object({
  permission: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2PermissionsGetPermissionRequestBody$ {
  /** @deprecated use `V2PermissionsGetPermissionRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    V2PermissionsGetPermissionRequestBody$inboundSchema;
  /** @deprecated use `V2PermissionsGetPermissionRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    V2PermissionsGetPermissionRequestBody$outboundSchema;
  /** @deprecated use `V2PermissionsGetPermissionRequestBody$Outbound` instead. */
  export type Outbound = V2PermissionsGetPermissionRequestBody$Outbound;
}

export function v2PermissionsGetPermissionRequestBodyToJSON(
  v2PermissionsGetPermissionRequestBody: V2PermissionsGetPermissionRequestBody,
): string {
  return JSON.stringify(
    V2PermissionsGetPermissionRequestBody$outboundSchema.parse(
      v2PermissionsGetPermissionRequestBody,
    ),
  );
}

export function v2PermissionsGetPermissionRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<V2PermissionsGetPermissionRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      V2PermissionsGetPermissionRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2PermissionsGetPermissionRequestBody' from JSON`,
  );
}
