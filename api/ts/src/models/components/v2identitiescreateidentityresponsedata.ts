/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V2IdentitiesCreateIdentityResponseData = {
  /**
   * The unique identifier of the created identity.
   */
  identityId: string;
};

/** @internal */
export const V2IdentitiesCreateIdentityResponseData$inboundSchema: z.ZodType<
  V2IdentitiesCreateIdentityResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  identityId: z.string(),
});

/** @internal */
export type V2IdentitiesCreateIdentityResponseData$Outbound = {
  identityId: string;
};

/** @internal */
export const V2IdentitiesCreateIdentityResponseData$outboundSchema: z.ZodType<
  V2IdentitiesCreateIdentityResponseData$Outbound,
  z.ZodTypeDef,
  V2IdentitiesCreateIdentityResponseData
> = z.object({
  identityId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2IdentitiesCreateIdentityResponseData$ {
  /** @deprecated use `V2IdentitiesCreateIdentityResponseData$inboundSchema` instead. */
  export const inboundSchema =
    V2IdentitiesCreateIdentityResponseData$inboundSchema;
  /** @deprecated use `V2IdentitiesCreateIdentityResponseData$outboundSchema` instead. */
  export const outboundSchema =
    V2IdentitiesCreateIdentityResponseData$outboundSchema;
  /** @deprecated use `V2IdentitiesCreateIdentityResponseData$Outbound` instead. */
  export type Outbound = V2IdentitiesCreateIdentityResponseData$Outbound;
}

export function v2IdentitiesCreateIdentityResponseDataToJSON(
  v2IdentitiesCreateIdentityResponseData:
    V2IdentitiesCreateIdentityResponseData,
): string {
  return JSON.stringify(
    V2IdentitiesCreateIdentityResponseData$outboundSchema.parse(
      v2IdentitiesCreateIdentityResponseData,
    ),
  );
}

export function v2IdentitiesCreateIdentityResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<V2IdentitiesCreateIdentityResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      V2IdentitiesCreateIdentityResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2IdentitiesCreateIdentityResponseData' from JSON`,
  );
}
