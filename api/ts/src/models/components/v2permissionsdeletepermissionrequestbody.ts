/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V2PermissionsDeletePermissionRequestBody = {
  /**
   * Specifies which permission to permanently delete from your workspace.
   *
   * @remarks
   *
   * This can be a permission ID or a permission slug.
   *
   * WARNING: Deleting a permission has immediate and irreversible consequences:
   * - All API keys with this permission will lose that access immediately
   * - All roles containing this permission will have it removed
   * - Any verification requests checking for this permission will fail
   * - This action cannot be undone
   *
   * Before deletion, ensure you:
   * - Have updated any keys or roles that depend on this permission
   * - Have migrated to alternative permissions if needed
   * - Have notified affected users about the access changes
   */
  permission: string;
};

/** @internal */
export const V2PermissionsDeletePermissionRequestBody$inboundSchema: z.ZodType<
  V2PermissionsDeletePermissionRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  permission: z.string(),
});

/** @internal */
export type V2PermissionsDeletePermissionRequestBody$Outbound = {
  permission: string;
};

/** @internal */
export const V2PermissionsDeletePermissionRequestBody$outboundSchema: z.ZodType<
  V2PermissionsDeletePermissionRequestBody$Outbound,
  z.ZodTypeDef,
  V2PermissionsDeletePermissionRequestBody
> = z.object({
  permission: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2PermissionsDeletePermissionRequestBody$ {
  /** @deprecated use `V2PermissionsDeletePermissionRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    V2PermissionsDeletePermissionRequestBody$inboundSchema;
  /** @deprecated use `V2PermissionsDeletePermissionRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    V2PermissionsDeletePermissionRequestBody$outboundSchema;
  /** @deprecated use `V2PermissionsDeletePermissionRequestBody$Outbound` instead. */
  export type Outbound = V2PermissionsDeletePermissionRequestBody$Outbound;
}

export function v2PermissionsDeletePermissionRequestBodyToJSON(
  v2PermissionsDeletePermissionRequestBody:
    V2PermissionsDeletePermissionRequestBody,
): string {
  return JSON.stringify(
    V2PermissionsDeletePermissionRequestBody$outboundSchema.parse(
      v2PermissionsDeletePermissionRequestBody,
    ),
  );
}

export function v2PermissionsDeletePermissionRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  V2PermissionsDeletePermissionRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      V2PermissionsDeletePermissionRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'V2PermissionsDeletePermissionRequestBody' from JSON`,
  );
}
