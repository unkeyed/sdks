/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V2PermissionsGetRoleRequestBody = {
  /**
   * Unique identifier of the role to permanently delete from your workspace.
   *
   * @remarks
   * Must either be a valid role ID that begins with 'role_' or the given role name and exists within your workspace.
   *
   * Use this endpoint to verify role details, check its current permissions, or retrieve metadata.
   * Returns complete role information including all assigned permissions for comprehensive access review.
   */
  role: string;
};

/** @internal */
export const V2PermissionsGetRoleRequestBody$inboundSchema: z.ZodType<
  V2PermissionsGetRoleRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: z.string(),
});

/** @internal */
export type V2PermissionsGetRoleRequestBody$Outbound = {
  role: string;
};

/** @internal */
export const V2PermissionsGetRoleRequestBody$outboundSchema: z.ZodType<
  V2PermissionsGetRoleRequestBody$Outbound,
  z.ZodTypeDef,
  V2PermissionsGetRoleRequestBody
> = z.object({
  role: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2PermissionsGetRoleRequestBody$ {
  /** @deprecated use `V2PermissionsGetRoleRequestBody$inboundSchema` instead. */
  export const inboundSchema = V2PermissionsGetRoleRequestBody$inboundSchema;
  /** @deprecated use `V2PermissionsGetRoleRequestBody$outboundSchema` instead. */
  export const outboundSchema = V2PermissionsGetRoleRequestBody$outboundSchema;
  /** @deprecated use `V2PermissionsGetRoleRequestBody$Outbound` instead. */
  export type Outbound = V2PermissionsGetRoleRequestBody$Outbound;
}

export function v2PermissionsGetRoleRequestBodyToJSON(
  v2PermissionsGetRoleRequestBody: V2PermissionsGetRoleRequestBody,
): string {
  return JSON.stringify(
    V2PermissionsGetRoleRequestBody$outboundSchema.parse(
      v2PermissionsGetRoleRequestBody,
    ),
  );
}

export function v2PermissionsGetRoleRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<V2PermissionsGetRoleRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2PermissionsGetRoleRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2PermissionsGetRoleRequestBody' from JSON`,
  );
}
