/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V2PermissionsCreateRoleRequestBody = {
  /**
   * The unique name for this role. Must be unique within your workspace and clearly indicate the role's purpose. Use descriptive names like 'admin', 'editor', or 'billing_manager'.
   *
   * @remarks
   *
   * Examples: 'admin.billing', 'support.readonly', 'developer.api', 'manager.analytics'
   */
  name: string;
  /**
   * Provides comprehensive documentation of what this role encompasses and what access it grants.
   *
   * @remarks
   * Include information about the intended use case, what permissions should be assigned, and any important considerations.
   * This internal documentation helps team members understand role boundaries and security implications.
   * Not visible to end users - designed for administration teams and access control audits.
   *
   * Consider documenting:
   * - The role's intended purpose and scope
   * - What types of users should receive this role
   * - What permissions are typically associated with it
   * - Any security considerations or limitations
   * - Related roles that might be used together
   */
  description?: string | undefined;
};

/** @internal */
export const V2PermissionsCreateRoleRequestBody$inboundSchema: z.ZodType<
  V2PermissionsCreateRoleRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
});

/** @internal */
export type V2PermissionsCreateRoleRequestBody$Outbound = {
  name: string;
  description?: string | undefined;
};

/** @internal */
export const V2PermissionsCreateRoleRequestBody$outboundSchema: z.ZodType<
  V2PermissionsCreateRoleRequestBody$Outbound,
  z.ZodTypeDef,
  V2PermissionsCreateRoleRequestBody
> = z.object({
  name: z.string(),
  description: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2PermissionsCreateRoleRequestBody$ {
  /** @deprecated use `V2PermissionsCreateRoleRequestBody$inboundSchema` instead. */
  export const inboundSchema = V2PermissionsCreateRoleRequestBody$inboundSchema;
  /** @deprecated use `V2PermissionsCreateRoleRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    V2PermissionsCreateRoleRequestBody$outboundSchema;
  /** @deprecated use `V2PermissionsCreateRoleRequestBody$Outbound` instead. */
  export type Outbound = V2PermissionsCreateRoleRequestBody$Outbound;
}

export function v2PermissionsCreateRoleRequestBodyToJSON(
  v2PermissionsCreateRoleRequestBody: V2PermissionsCreateRoleRequestBody,
): string {
  return JSON.stringify(
    V2PermissionsCreateRoleRequestBody$outboundSchema.parse(
      v2PermissionsCreateRoleRequestBody,
    ),
  );
}

export function v2PermissionsCreateRoleRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<V2PermissionsCreateRoleRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      V2PermissionsCreateRoleRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2PermissionsCreateRoleRequestBody' from JSON`,
  );
}
