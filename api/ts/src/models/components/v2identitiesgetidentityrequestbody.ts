/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V2IdentitiesGetIdentityRequestBody = {
  /**
   * The ID of the identity to retrieve. This can be either the externalId (from your own system that was used during identity creation) or the identityId (the internal ID returned by the identity service).
   */
  identity: string;
};

/** @internal */
export const V2IdentitiesGetIdentityRequestBody$inboundSchema: z.ZodType<
  V2IdentitiesGetIdentityRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  identity: z.string(),
});

/** @internal */
export type V2IdentitiesGetIdentityRequestBody$Outbound = {
  identity: string;
};

/** @internal */
export const V2IdentitiesGetIdentityRequestBody$outboundSchema: z.ZodType<
  V2IdentitiesGetIdentityRequestBody$Outbound,
  z.ZodTypeDef,
  V2IdentitiesGetIdentityRequestBody
> = z.object({
  identity: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2IdentitiesGetIdentityRequestBody$ {
  /** @deprecated use `V2IdentitiesGetIdentityRequestBody$inboundSchema` instead. */
  export const inboundSchema = V2IdentitiesGetIdentityRequestBody$inboundSchema;
  /** @deprecated use `V2IdentitiesGetIdentityRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    V2IdentitiesGetIdentityRequestBody$outboundSchema;
  /** @deprecated use `V2IdentitiesGetIdentityRequestBody$Outbound` instead. */
  export type Outbound = V2IdentitiesGetIdentityRequestBody$Outbound;
}

export function v2IdentitiesGetIdentityRequestBodyToJSON(
  v2IdentitiesGetIdentityRequestBody: V2IdentitiesGetIdentityRequestBody,
): string {
  return JSON.stringify(
    V2IdentitiesGetIdentityRequestBody$outboundSchema.parse(
      v2IdentitiesGetIdentityRequestBody,
    ),
  );
}

export function v2IdentitiesGetIdentityRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<V2IdentitiesGetIdentityRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      V2IdentitiesGetIdentityRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2IdentitiesGetIdentityRequestBody' from JSON`,
  );
}
