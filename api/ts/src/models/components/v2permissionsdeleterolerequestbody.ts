/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V2PermissionsDeleteRoleRequestBody = {
  /**
   * Unique identifier of the role to permanently delete from your workspace.
   *
   * @remarks
   * Must either be a valid role ID that begins with 'role_' or the given role name and exists within your workspace.
   *
   * WARNING: Deletion is immediate and irreversible with significant consequences:
   * - All API keys assigned this role will lose the associated permissions
   * - Access to resources protected by this role's permissions will be denied
   * - Any authorization logic depending on this role will start failing
   * - Historical analytics referencing this role remain intact
   *
   * Before deletion, ensure:
   * - You've updated any dependent authorization logic or code
   * - You've migrated any keys to use alternative roles or direct permissions
   * - You've notified relevant team members of the access changes
   */
  role: string;
};

/** @internal */
export const V2PermissionsDeleteRoleRequestBody$inboundSchema: z.ZodType<
  V2PermissionsDeleteRoleRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: z.string(),
});

/** @internal */
export type V2PermissionsDeleteRoleRequestBody$Outbound = {
  role: string;
};

/** @internal */
export const V2PermissionsDeleteRoleRequestBody$outboundSchema: z.ZodType<
  V2PermissionsDeleteRoleRequestBody$Outbound,
  z.ZodTypeDef,
  V2PermissionsDeleteRoleRequestBody
> = z.object({
  role: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2PermissionsDeleteRoleRequestBody$ {
  /** @deprecated use `V2PermissionsDeleteRoleRequestBody$inboundSchema` instead. */
  export const inboundSchema = V2PermissionsDeleteRoleRequestBody$inboundSchema;
  /** @deprecated use `V2PermissionsDeleteRoleRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    V2PermissionsDeleteRoleRequestBody$outboundSchema;
  /** @deprecated use `V2PermissionsDeleteRoleRequestBody$Outbound` instead. */
  export type Outbound = V2PermissionsDeleteRoleRequestBody$Outbound;
}

export function v2PermissionsDeleteRoleRequestBodyToJSON(
  v2PermissionsDeleteRoleRequestBody: V2PermissionsDeleteRoleRequestBody,
): string {
  return JSON.stringify(
    V2PermissionsDeleteRoleRequestBody$outboundSchema.parse(
      v2PermissionsDeleteRoleRequestBody,
    ),
  );
}

export function v2PermissionsDeleteRoleRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<V2PermissionsDeleteRoleRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      V2PermissionsDeleteRoleRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2PermissionsDeleteRoleRequestBody' from JSON`,
  );
}
