/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RatelimitResponse,
  RatelimitResponse$inboundSchema,
  RatelimitResponse$Outbound,
  RatelimitResponse$outboundSchema,
} from "./ratelimitresponse.js";

export type Identity = {
  /**
   * Identity ID
   */
  id: string;
  /**
   * External identity ID
   */
  externalId: string;
  /**
   * Identity metadata
   */
  meta?: { [k: string]: any } | undefined;
  /**
   * Identity ratelimits
   */
  ratelimits?: Array<RatelimitResponse> | undefined;
};

/** @internal */
export const Identity$inboundSchema: z.ZodType<
  Identity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  externalId: z.string(),
  meta: z.record(z.any()).optional(),
  ratelimits: z.array(RatelimitResponse$inboundSchema).optional(),
});

/** @internal */
export type Identity$Outbound = {
  id: string;
  externalId: string;
  meta?: { [k: string]: any } | undefined;
  ratelimits?: Array<RatelimitResponse$Outbound> | undefined;
};

/** @internal */
export const Identity$outboundSchema: z.ZodType<
  Identity$Outbound,
  z.ZodTypeDef,
  Identity
> = z.object({
  id: z.string(),
  externalId: z.string(),
  meta: z.record(z.any()).optional(),
  ratelimits: z.array(RatelimitResponse$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Identity$ {
  /** @deprecated use `Identity$inboundSchema` instead. */
  export const inboundSchema = Identity$inboundSchema;
  /** @deprecated use `Identity$outboundSchema` instead. */
  export const outboundSchema = Identity$outboundSchema;
  /** @deprecated use `Identity$Outbound` instead. */
  export type Outbound = Identity$Outbound;
}

export function identityToJSON(identity: Identity): string {
  return JSON.stringify(Identity$outboundSchema.parse(identity));
}

export function identityFromJSON(
  jsonString: string,
): SafeParseResult<Identity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Identity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Identity' from JSON`,
  );
}
