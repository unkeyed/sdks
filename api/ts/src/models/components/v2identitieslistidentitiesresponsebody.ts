/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Identity,
  Identity$inboundSchema,
  Identity$Outbound,
  Identity$outboundSchema,
} from "./identity.js";
import {
  Meta,
  Meta$inboundSchema,
  Meta$Outbound,
  Meta$outboundSchema,
} from "./meta.js";
import {
  Pagination,
  Pagination$inboundSchema,
  Pagination$Outbound,
  Pagination$outboundSchema,
} from "./pagination.js";

export type V2IdentitiesListIdentitiesResponseBody = {
  /**
   * Metadata object included in every API response. This provides context about the request and is essential for debugging, audit trails, and support inquiries. The `requestId` is particularly important when troubleshooting issues with the Unkey support team.
   */
  meta: Meta;
  /**
   * List of identities matching the specified criteria.
   */
  data: Array<Identity>;
  /**
   * Pagination metadata for list endpoints. Provides information necessary to traverse through large result sets efficiently using cursor-based pagination.
   */
  pagination: Pagination;
};

/** @internal */
export const V2IdentitiesListIdentitiesResponseBody$inboundSchema: z.ZodType<
  V2IdentitiesListIdentitiesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  meta: Meta$inboundSchema,
  data: z.array(Identity$inboundSchema),
  pagination: Pagination$inboundSchema,
});

/** @internal */
export type V2IdentitiesListIdentitiesResponseBody$Outbound = {
  meta: Meta$Outbound;
  data: Array<Identity$Outbound>;
  pagination: Pagination$Outbound;
};

/** @internal */
export const V2IdentitiesListIdentitiesResponseBody$outboundSchema: z.ZodType<
  V2IdentitiesListIdentitiesResponseBody$Outbound,
  z.ZodTypeDef,
  V2IdentitiesListIdentitiesResponseBody
> = z.object({
  meta: Meta$outboundSchema,
  data: z.array(Identity$outboundSchema),
  pagination: Pagination$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2IdentitiesListIdentitiesResponseBody$ {
  /** @deprecated use `V2IdentitiesListIdentitiesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    V2IdentitiesListIdentitiesResponseBody$inboundSchema;
  /** @deprecated use `V2IdentitiesListIdentitiesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    V2IdentitiesListIdentitiesResponseBody$outboundSchema;
  /** @deprecated use `V2IdentitiesListIdentitiesResponseBody$Outbound` instead. */
  export type Outbound = V2IdentitiesListIdentitiesResponseBody$Outbound;
}

export function v2IdentitiesListIdentitiesResponseBodyToJSON(
  v2IdentitiesListIdentitiesResponseBody:
    V2IdentitiesListIdentitiesResponseBody,
): string {
  return JSON.stringify(
    V2IdentitiesListIdentitiesResponseBody$outboundSchema.parse(
      v2IdentitiesListIdentitiesResponseBody,
    ),
  );
}

export function v2IdentitiesListIdentitiesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<V2IdentitiesListIdentitiesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      V2IdentitiesListIdentitiesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2IdentitiesListIdentitiesResponseBody' from JSON`,
  );
}
