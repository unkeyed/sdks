/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V2PermissionsListRolesRequestBody = {
  /**
   * Maximum number of roles to return in a single response.
   *
   * @remarks
   * Use smaller values for faster response times and better UI performance.
   * Use larger values when you need to process many roles efficiently.
   * Results exceeding this limit will be paginated with a cursor for continuation.
   */
  limit?: number | undefined;
  /**
   * Pagination cursor from a previous response to fetch the next page of roles.
   *
   * @remarks
   * Include this when you need to retrieve additional roles beyond the first page.
   * Each response containing more results will include a cursor value that can be used here.
   * Leave empty or omit this field to start from the beginning of the role list.
   */
  cursor?: string | undefined;
};

/** @internal */
export const V2PermissionsListRolesRequestBody$inboundSchema: z.ZodType<
  V2PermissionsListRolesRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  limit: z.number().int().default(100),
  cursor: z.string().optional(),
});

/** @internal */
export type V2PermissionsListRolesRequestBody$Outbound = {
  limit: number;
  cursor?: string | undefined;
};

/** @internal */
export const V2PermissionsListRolesRequestBody$outboundSchema: z.ZodType<
  V2PermissionsListRolesRequestBody$Outbound,
  z.ZodTypeDef,
  V2PermissionsListRolesRequestBody
> = z.object({
  limit: z.number().int().default(100),
  cursor: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2PermissionsListRolesRequestBody$ {
  /** @deprecated use `V2PermissionsListRolesRequestBody$inboundSchema` instead. */
  export const inboundSchema = V2PermissionsListRolesRequestBody$inboundSchema;
  /** @deprecated use `V2PermissionsListRolesRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    V2PermissionsListRolesRequestBody$outboundSchema;
  /** @deprecated use `V2PermissionsListRolesRequestBody$Outbound` instead. */
  export type Outbound = V2PermissionsListRolesRequestBody$Outbound;
}

export function v2PermissionsListRolesRequestBodyToJSON(
  v2PermissionsListRolesRequestBody: V2PermissionsListRolesRequestBody,
): string {
  return JSON.stringify(
    V2PermissionsListRolesRequestBody$outboundSchema.parse(
      v2PermissionsListRolesRequestBody,
    ),
  );
}

export function v2PermissionsListRolesRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<V2PermissionsListRolesRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2PermissionsListRolesRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2PermissionsListRolesRequestBody' from JSON`,
  );
}
