/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V2KeysSetPermissionsRequestBody = {
  /**
   * Specifies which key receives the additional permissions using the database identifier returned from `keys.createKey`.
   *
   * @remarks
   * Do not confuse this with the actual API key string that users include in requests.
   */
  keyId: string;
  /**
   * The permissions to set for this key.
   *
   * @remarks
   *
   * This is a complete replacement operation - it overwrites all existing direct permissions with this new set.
   *
   * Key behaviors:
   * - Providing an empty array removes all direct permissions from the key
   * - This only affects direct permissions - permissions granted through roles are not affected
   * - All existing direct permissions not included in this list will be removed
   *
   * Any permissions that do not exist will be auto created if the root key has permissions, otherwise this operation will fail with a 403 error.
   */
  permissions: Array<string>;
};

/** @internal */
export const V2KeysSetPermissionsRequestBody$inboundSchema: z.ZodType<
  V2KeysSetPermissionsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  keyId: z.string(),
  permissions: z.array(z.string()),
});

/** @internal */
export type V2KeysSetPermissionsRequestBody$Outbound = {
  keyId: string;
  permissions: Array<string>;
};

/** @internal */
export const V2KeysSetPermissionsRequestBody$outboundSchema: z.ZodType<
  V2KeysSetPermissionsRequestBody$Outbound,
  z.ZodTypeDef,
  V2KeysSetPermissionsRequestBody
> = z.object({
  keyId: z.string(),
  permissions: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2KeysSetPermissionsRequestBody$ {
  /** @deprecated use `V2KeysSetPermissionsRequestBody$inboundSchema` instead. */
  export const inboundSchema = V2KeysSetPermissionsRequestBody$inboundSchema;
  /** @deprecated use `V2KeysSetPermissionsRequestBody$outboundSchema` instead. */
  export const outboundSchema = V2KeysSetPermissionsRequestBody$outboundSchema;
  /** @deprecated use `V2KeysSetPermissionsRequestBody$Outbound` instead. */
  export type Outbound = V2KeysSetPermissionsRequestBody$Outbound;
}

export function v2KeysSetPermissionsRequestBodyToJSON(
  v2KeysSetPermissionsRequestBody: V2KeysSetPermissionsRequestBody,
): string {
  return JSON.stringify(
    V2KeysSetPermissionsRequestBody$outboundSchema.parse(
      v2KeysSetPermissionsRequestBody,
    ),
  );
}

export function v2KeysSetPermissionsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<V2KeysSetPermissionsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2KeysSetPermissionsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2KeysSetPermissionsRequestBody' from JSON`,
  );
}
