/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  UpdateKeyCreditsRefill,
  UpdateKeyCreditsRefill$inboundSchema,
  UpdateKeyCreditsRefill$Outbound,
  UpdateKeyCreditsRefill$outboundSchema,
} from "./updatekeycreditsrefill.js";

/**
 * Credit configuration and remaining balance for this key.
 */
export type UpdateKeyCreditsData = {
  /**
   * Number of credits remaining (null for unlimited). This also clears the refilling schedule.
   */
  remaining?: number | null | undefined;
  /**
   * Configuration for automatic credit refill behavior.
   */
  refill?: UpdateKeyCreditsRefill | null | undefined;
};

/** @internal */
export const UpdateKeyCreditsData$inboundSchema: z.ZodType<
  UpdateKeyCreditsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  remaining: z.nullable(z.number().int()).optional(),
  refill: z.nullable(UpdateKeyCreditsRefill$inboundSchema).optional(),
});

/** @internal */
export type UpdateKeyCreditsData$Outbound = {
  remaining?: number | null | undefined;
  refill?: UpdateKeyCreditsRefill$Outbound | null | undefined;
};

/** @internal */
export const UpdateKeyCreditsData$outboundSchema: z.ZodType<
  UpdateKeyCreditsData$Outbound,
  z.ZodTypeDef,
  UpdateKeyCreditsData
> = z.object({
  remaining: z.nullable(z.number().int()).optional(),
  refill: z.nullable(UpdateKeyCreditsRefill$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateKeyCreditsData$ {
  /** @deprecated use `UpdateKeyCreditsData$inboundSchema` instead. */
  export const inboundSchema = UpdateKeyCreditsData$inboundSchema;
  /** @deprecated use `UpdateKeyCreditsData$outboundSchema` instead. */
  export const outboundSchema = UpdateKeyCreditsData$outboundSchema;
  /** @deprecated use `UpdateKeyCreditsData$Outbound` instead. */
  export type Outbound = UpdateKeyCreditsData$Outbound;
}

export function updateKeyCreditsDataToJSON(
  updateKeyCreditsData: UpdateKeyCreditsData,
): string {
  return JSON.stringify(
    UpdateKeyCreditsData$outboundSchema.parse(updateKeyCreditsData),
  );
}

export function updateKeyCreditsDataFromJSON(
  jsonString: string,
): SafeParseResult<UpdateKeyCreditsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateKeyCreditsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateKeyCreditsData' from JSON`,
  );
}
