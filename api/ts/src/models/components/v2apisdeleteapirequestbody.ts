/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V2ApisDeleteApiRequestBody = {
  /**
   * Specifies which API namespace to permanently delete from your workspace.
   *
   * @remarks
   * Must be a valid API ID that begins with 'api_' and exists within your workspace.
   *
   * Before proceeding, ensure you have the correct API ID and understand that this action cannot be undone. If you need to migrate functionality, create replacement keys in a new API namespace and update client applications before deletion.
   */
  apiId: string;
};

/** @internal */
export const V2ApisDeleteApiRequestBody$inboundSchema: z.ZodType<
  V2ApisDeleteApiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiId: z.string(),
});

/** @internal */
export type V2ApisDeleteApiRequestBody$Outbound = {
  apiId: string;
};

/** @internal */
export const V2ApisDeleteApiRequestBody$outboundSchema: z.ZodType<
  V2ApisDeleteApiRequestBody$Outbound,
  z.ZodTypeDef,
  V2ApisDeleteApiRequestBody
> = z.object({
  apiId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2ApisDeleteApiRequestBody$ {
  /** @deprecated use `V2ApisDeleteApiRequestBody$inboundSchema` instead. */
  export const inboundSchema = V2ApisDeleteApiRequestBody$inboundSchema;
  /** @deprecated use `V2ApisDeleteApiRequestBody$outboundSchema` instead. */
  export const outboundSchema = V2ApisDeleteApiRequestBody$outboundSchema;
  /** @deprecated use `V2ApisDeleteApiRequestBody$Outbound` instead. */
  export type Outbound = V2ApisDeleteApiRequestBody$Outbound;
}

export function v2ApisDeleteApiRequestBodyToJSON(
  v2ApisDeleteApiRequestBody: V2ApisDeleteApiRequestBody,
): string {
  return JSON.stringify(
    V2ApisDeleteApiRequestBody$outboundSchema.parse(v2ApisDeleteApiRequestBody),
  );
}

export function v2ApisDeleteApiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<V2ApisDeleteApiRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2ApisDeleteApiRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2ApisDeleteApiRequestBody' from JSON`,
  );
}
