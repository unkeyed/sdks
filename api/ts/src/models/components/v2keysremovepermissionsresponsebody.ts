/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Meta,
  Meta$inboundSchema,
  Meta$Outbound,
  Meta$outboundSchema,
} from "./meta.js";
import {
  Permission,
  Permission$inboundSchema,
  Permission$Outbound,
  Permission$outboundSchema,
} from "./permission.js";

export type V2KeysRemovePermissionsResponseBody = {
  /**
   * Metadata object included in every API response. This provides context about the request and is essential for debugging, audit trails, and support inquiries. The `requestId` is particularly important when troubleshooting issues with the Unkey support team.
   */
  meta: Meta;
  /**
   * Complete list of all permissions directly assigned to the key after the removal operation (remaining permissions only).
   *
   * @remarks
   *
   * Notes:
   * - This list does NOT include permissions granted through roles
   * - For a complete permission picture, use `/v2/keys.getKey` instead
   * - An empty array indicates the key has no direct permissions assigned
   * - Any cached versions of the key are immediately invalidated to ensure consistency
   * - Changes to permissions take effect within seconds for new verifications
   */
  data: Array<Permission>;
};

/** @internal */
export const V2KeysRemovePermissionsResponseBody$inboundSchema: z.ZodType<
  V2KeysRemovePermissionsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  meta: Meta$inboundSchema,
  data: z.array(Permission$inboundSchema),
});

/** @internal */
export type V2KeysRemovePermissionsResponseBody$Outbound = {
  meta: Meta$Outbound;
  data: Array<Permission$Outbound>;
};

/** @internal */
export const V2KeysRemovePermissionsResponseBody$outboundSchema: z.ZodType<
  V2KeysRemovePermissionsResponseBody$Outbound,
  z.ZodTypeDef,
  V2KeysRemovePermissionsResponseBody
> = z.object({
  meta: Meta$outboundSchema,
  data: z.array(Permission$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2KeysRemovePermissionsResponseBody$ {
  /** @deprecated use `V2KeysRemovePermissionsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    V2KeysRemovePermissionsResponseBody$inboundSchema;
  /** @deprecated use `V2KeysRemovePermissionsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    V2KeysRemovePermissionsResponseBody$outboundSchema;
  /** @deprecated use `V2KeysRemovePermissionsResponseBody$Outbound` instead. */
  export type Outbound = V2KeysRemovePermissionsResponseBody$Outbound;
}

export function v2KeysRemovePermissionsResponseBodyToJSON(
  v2KeysRemovePermissionsResponseBody: V2KeysRemovePermissionsResponseBody,
): string {
  return JSON.stringify(
    V2KeysRemovePermissionsResponseBody$outboundSchema.parse(
      v2KeysRemovePermissionsResponseBody,
    ),
  );
}

export function v2KeysRemovePermissionsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<V2KeysRemovePermissionsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      V2KeysRemovePermissionsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2KeysRemovePermissionsResponseBody' from JSON`,
  );
}
