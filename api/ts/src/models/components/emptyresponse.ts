/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Empty response object by design. A successful response indicates this operation was successfully executed.
 */
export type EmptyResponse = {};

/** @internal */
export const EmptyResponse$inboundSchema: z.ZodType<
  EmptyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type EmptyResponse$Outbound = {};

/** @internal */
export const EmptyResponse$outboundSchema: z.ZodType<
  EmptyResponse$Outbound,
  z.ZodTypeDef,
  EmptyResponse
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmptyResponse$ {
  /** @deprecated use `EmptyResponse$inboundSchema` instead. */
  export const inboundSchema = EmptyResponse$inboundSchema;
  /** @deprecated use `EmptyResponse$outboundSchema` instead. */
  export const outboundSchema = EmptyResponse$outboundSchema;
  /** @deprecated use `EmptyResponse$Outbound` instead. */
  export type Outbound = EmptyResponse$Outbound;
}

export function emptyResponseToJSON(emptyResponse: EmptyResponse): string {
  return JSON.stringify(EmptyResponse$outboundSchema.parse(emptyResponse));
}

export function emptyResponseFromJSON(
  jsonString: string,
): SafeParseResult<EmptyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmptyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmptyResponse' from JSON`,
  );
}
