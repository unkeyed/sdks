/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V2IdentitiesDeleteIdentityRequestBody2 = {
  /**
   * The id of this identity in your system.
   *
   * @remarks
   *
   * This usually comes from your authentication provider and could be a userId, organisationId or even an email.
   * It does not matter what you use, as long as it uniquely identifies something in your application.
   */
  externalId?: string | undefined;
  /**
   * The Unkey Identity ID.
   */
  identityId: string;
};

export type V2IdentitiesDeleteIdentityRequestBody1 = {
  /**
   * The id of this identity in your system.
   *
   * @remarks
   *
   * This usually comes from your authentication provider and could be a userId, organisationId or even an email.
   * It does not matter what you use, as long as it uniquely identifies something in your application.
   */
  externalId: string;
  /**
   * The Unkey Identity ID.
   */
  identityId?: string | undefined;
};

export type V2IdentitiesDeleteIdentityRequestBodyUnion =
  | V2IdentitiesDeleteIdentityRequestBody1
  | V2IdentitiesDeleteIdentityRequestBody2;

/** @internal */
export const V2IdentitiesDeleteIdentityRequestBody2$inboundSchema: z.ZodType<
  V2IdentitiesDeleteIdentityRequestBody2,
  z.ZodTypeDef,
  unknown
> = z.object({
  externalId: z.string().optional(),
  identityId: z.string(),
});

/** @internal */
export type V2IdentitiesDeleteIdentityRequestBody2$Outbound = {
  externalId?: string | undefined;
  identityId: string;
};

/** @internal */
export const V2IdentitiesDeleteIdentityRequestBody2$outboundSchema: z.ZodType<
  V2IdentitiesDeleteIdentityRequestBody2$Outbound,
  z.ZodTypeDef,
  V2IdentitiesDeleteIdentityRequestBody2
> = z.object({
  externalId: z.string().optional(),
  identityId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2IdentitiesDeleteIdentityRequestBody2$ {
  /** @deprecated use `V2IdentitiesDeleteIdentityRequestBody2$inboundSchema` instead. */
  export const inboundSchema =
    V2IdentitiesDeleteIdentityRequestBody2$inboundSchema;
  /** @deprecated use `V2IdentitiesDeleteIdentityRequestBody2$outboundSchema` instead. */
  export const outboundSchema =
    V2IdentitiesDeleteIdentityRequestBody2$outboundSchema;
  /** @deprecated use `V2IdentitiesDeleteIdentityRequestBody2$Outbound` instead. */
  export type Outbound = V2IdentitiesDeleteIdentityRequestBody2$Outbound;
}

export function v2IdentitiesDeleteIdentityRequestBody2ToJSON(
  v2IdentitiesDeleteIdentityRequestBody2:
    V2IdentitiesDeleteIdentityRequestBody2,
): string {
  return JSON.stringify(
    V2IdentitiesDeleteIdentityRequestBody2$outboundSchema.parse(
      v2IdentitiesDeleteIdentityRequestBody2,
    ),
  );
}

export function v2IdentitiesDeleteIdentityRequestBody2FromJSON(
  jsonString: string,
): SafeParseResult<V2IdentitiesDeleteIdentityRequestBody2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      V2IdentitiesDeleteIdentityRequestBody2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2IdentitiesDeleteIdentityRequestBody2' from JSON`,
  );
}

/** @internal */
export const V2IdentitiesDeleteIdentityRequestBody1$inboundSchema: z.ZodType<
  V2IdentitiesDeleteIdentityRequestBody1,
  z.ZodTypeDef,
  unknown
> = z.object({
  externalId: z.string(),
  identityId: z.string().optional(),
});

/** @internal */
export type V2IdentitiesDeleteIdentityRequestBody1$Outbound = {
  externalId: string;
  identityId?: string | undefined;
};

/** @internal */
export const V2IdentitiesDeleteIdentityRequestBody1$outboundSchema: z.ZodType<
  V2IdentitiesDeleteIdentityRequestBody1$Outbound,
  z.ZodTypeDef,
  V2IdentitiesDeleteIdentityRequestBody1
> = z.object({
  externalId: z.string(),
  identityId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2IdentitiesDeleteIdentityRequestBody1$ {
  /** @deprecated use `V2IdentitiesDeleteIdentityRequestBody1$inboundSchema` instead. */
  export const inboundSchema =
    V2IdentitiesDeleteIdentityRequestBody1$inboundSchema;
  /** @deprecated use `V2IdentitiesDeleteIdentityRequestBody1$outboundSchema` instead. */
  export const outboundSchema =
    V2IdentitiesDeleteIdentityRequestBody1$outboundSchema;
  /** @deprecated use `V2IdentitiesDeleteIdentityRequestBody1$Outbound` instead. */
  export type Outbound = V2IdentitiesDeleteIdentityRequestBody1$Outbound;
}

export function v2IdentitiesDeleteIdentityRequestBody1ToJSON(
  v2IdentitiesDeleteIdentityRequestBody1:
    V2IdentitiesDeleteIdentityRequestBody1,
): string {
  return JSON.stringify(
    V2IdentitiesDeleteIdentityRequestBody1$outboundSchema.parse(
      v2IdentitiesDeleteIdentityRequestBody1,
    ),
  );
}

export function v2IdentitiesDeleteIdentityRequestBody1FromJSON(
  jsonString: string,
): SafeParseResult<V2IdentitiesDeleteIdentityRequestBody1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      V2IdentitiesDeleteIdentityRequestBody1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2IdentitiesDeleteIdentityRequestBody1' from JSON`,
  );
}

/** @internal */
export const V2IdentitiesDeleteIdentityRequestBodyUnion$inboundSchema:
  z.ZodType<V2IdentitiesDeleteIdentityRequestBodyUnion, z.ZodTypeDef, unknown> =
    z.union([
      z.lazy(() => V2IdentitiesDeleteIdentityRequestBody1$inboundSchema),
      z.lazy(() => V2IdentitiesDeleteIdentityRequestBody2$inboundSchema),
    ]);

/** @internal */
export type V2IdentitiesDeleteIdentityRequestBodyUnion$Outbound =
  | V2IdentitiesDeleteIdentityRequestBody1$Outbound
  | V2IdentitiesDeleteIdentityRequestBody2$Outbound;

/** @internal */
export const V2IdentitiesDeleteIdentityRequestBodyUnion$outboundSchema:
  z.ZodType<
    V2IdentitiesDeleteIdentityRequestBodyUnion$Outbound,
    z.ZodTypeDef,
    V2IdentitiesDeleteIdentityRequestBodyUnion
  > = z.union([
    z.lazy(() => V2IdentitiesDeleteIdentityRequestBody1$outboundSchema),
    z.lazy(() => V2IdentitiesDeleteIdentityRequestBody2$outboundSchema),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2IdentitiesDeleteIdentityRequestBodyUnion$ {
  /** @deprecated use `V2IdentitiesDeleteIdentityRequestBodyUnion$inboundSchema` instead. */
  export const inboundSchema =
    V2IdentitiesDeleteIdentityRequestBodyUnion$inboundSchema;
  /** @deprecated use `V2IdentitiesDeleteIdentityRequestBodyUnion$outboundSchema` instead. */
  export const outboundSchema =
    V2IdentitiesDeleteIdentityRequestBodyUnion$outboundSchema;
  /** @deprecated use `V2IdentitiesDeleteIdentityRequestBodyUnion$Outbound` instead. */
  export type Outbound = V2IdentitiesDeleteIdentityRequestBodyUnion$Outbound;
}

export function v2IdentitiesDeleteIdentityRequestBodyUnionToJSON(
  v2IdentitiesDeleteIdentityRequestBodyUnion:
    V2IdentitiesDeleteIdentityRequestBodyUnion,
): string {
  return JSON.stringify(
    V2IdentitiesDeleteIdentityRequestBodyUnion$outboundSchema.parse(
      v2IdentitiesDeleteIdentityRequestBodyUnion,
    ),
  );
}

export function v2IdentitiesDeleteIdentityRequestBodyUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  V2IdentitiesDeleteIdentityRequestBodyUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      V2IdentitiesDeleteIdentityRequestBodyUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'V2IdentitiesDeleteIdentityRequestBodyUnion' from JSON`,
  );
}
