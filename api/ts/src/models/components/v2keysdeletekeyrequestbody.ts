/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V2KeysDeleteKeyRequestBody = {
  /**
   * Specifies which key to delete using the database identifier returned from `createKey`.
   *
   * @remarks
   * Do not confuse this with the actual API key string that users include in requests.
   * Deletion immediately invalidates the key, causing all future verification attempts to fail with `code=NOT_FOUND`.
   * Key deletion triggers cache invalidation across all regions but may take up to 30 seconds to fully propagate.
   */
  keyId: string;
  /**
   * Controls deletion behavior between recoverable soft-deletion and irreversible permanent erasure.
   *
   * @remarks
   * Soft deletion (default) preserves key data for potential recovery through direct database operations.
   * Permanent deletion completely removes all traces including hash values and metadata with no recovery option.
   *
   * Use permanent deletion only for regulatory compliance (GDPR), resolving hash collisions, or when reusing identical key strings.
   * Permanent deletion cannot be undone and may affect analytics data that references the deleted key.
   * Most applications should use soft deletion to maintain audit trails and prevent accidental data loss.
   */
  permanent?: boolean | undefined;
};

/** @internal */
export const V2KeysDeleteKeyRequestBody$inboundSchema: z.ZodType<
  V2KeysDeleteKeyRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  keyId: z.string(),
  permanent: z.boolean().default(false),
});

/** @internal */
export type V2KeysDeleteKeyRequestBody$Outbound = {
  keyId: string;
  permanent: boolean;
};

/** @internal */
export const V2KeysDeleteKeyRequestBody$outboundSchema: z.ZodType<
  V2KeysDeleteKeyRequestBody$Outbound,
  z.ZodTypeDef,
  V2KeysDeleteKeyRequestBody
> = z.object({
  keyId: z.string(),
  permanent: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2KeysDeleteKeyRequestBody$ {
  /** @deprecated use `V2KeysDeleteKeyRequestBody$inboundSchema` instead. */
  export const inboundSchema = V2KeysDeleteKeyRequestBody$inboundSchema;
  /** @deprecated use `V2KeysDeleteKeyRequestBody$outboundSchema` instead. */
  export const outboundSchema = V2KeysDeleteKeyRequestBody$outboundSchema;
  /** @deprecated use `V2KeysDeleteKeyRequestBody$Outbound` instead. */
  export type Outbound = V2KeysDeleteKeyRequestBody$Outbound;
}

export function v2KeysDeleteKeyRequestBodyToJSON(
  v2KeysDeleteKeyRequestBody: V2KeysDeleteKeyRequestBody,
): string {
  return JSON.stringify(
    V2KeysDeleteKeyRequestBody$outboundSchema.parse(v2KeysDeleteKeyRequestBody),
  );
}

export function v2KeysDeleteKeyRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<V2KeysDeleteKeyRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2KeysDeleteKeyRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2KeysDeleteKeyRequestBody' from JSON`,
  );
}
