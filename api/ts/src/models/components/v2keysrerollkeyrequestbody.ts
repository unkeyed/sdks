/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V2KeysRerollKeyRequestBody = {
  /**
   * The database identifier of the key to reroll.
   *
   * @remarks
   *
   * This is the unique ID returned when creating or listing keys, NOT the actual API key token.
   * You can find this ID in:
   * - The response from `keys.createKey`
   * - Key verification responses
   * - The Unkey dashboard
   * - API key listing endpoints
   */
  keyId: string;
  /**
   * Duration in milliseconds until the ORIGINAL key is revoked, starting from now.
   *
   * @remarks
   *
   * This parameter controls the overlap period for key rotation:
   * - Set to `0` to revoke the original key immediately
   * - Positive values keep the original key active for the specified duration
   * - Allows graceful migration by giving users time to update their credentials
   *
   * Common overlap periods:
   * - Immediate revocation: 0
   * - 1 hour grace period: 3600000
   * - 24 hours grace period: 86400000
   * - 7 days grace period: 604800000
   * - 30 days grace period: 2592000000
   */
  expiration: number;
};

/** @internal */
export const V2KeysRerollKeyRequestBody$inboundSchema: z.ZodType<
  V2KeysRerollKeyRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  keyId: z.string(),
  expiration: z.number().int(),
});

/** @internal */
export type V2KeysRerollKeyRequestBody$Outbound = {
  keyId: string;
  expiration: number;
};

/** @internal */
export const V2KeysRerollKeyRequestBody$outboundSchema: z.ZodType<
  V2KeysRerollKeyRequestBody$Outbound,
  z.ZodTypeDef,
  V2KeysRerollKeyRequestBody
> = z.object({
  keyId: z.string(),
  expiration: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2KeysRerollKeyRequestBody$ {
  /** @deprecated use `V2KeysRerollKeyRequestBody$inboundSchema` instead. */
  export const inboundSchema = V2KeysRerollKeyRequestBody$inboundSchema;
  /** @deprecated use `V2KeysRerollKeyRequestBody$outboundSchema` instead. */
  export const outboundSchema = V2KeysRerollKeyRequestBody$outboundSchema;
  /** @deprecated use `V2KeysRerollKeyRequestBody$Outbound` instead. */
  export type Outbound = V2KeysRerollKeyRequestBody$Outbound;
}

export function v2KeysRerollKeyRequestBodyToJSON(
  v2KeysRerollKeyRequestBody: V2KeysRerollKeyRequestBody,
): string {
  return JSON.stringify(
    V2KeysRerollKeyRequestBody$outboundSchema.parse(v2KeysRerollKeyRequestBody),
  );
}

export function v2KeysRerollKeyRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<V2KeysRerollKeyRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2KeysRerollKeyRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2KeysRerollKeyRequestBody' from JSON`,
  );
}
