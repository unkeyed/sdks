/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Defines how to modify the key's remaining credits. Use 'set' to replace current credits with a specific value or unlimited usage, 'increment' to add credits for plan upgrades or credit purchases, and 'decrement' to reduce credits for refunds or policy violations.
 *
 * @remarks
 */
export const Operation = {
  Set: "set",
  Increment: "increment",
  Decrement: "decrement",
} as const;
/**
 * Defines how to modify the key's remaining credits. Use 'set' to replace current credits with a specific value or unlimited usage, 'increment' to add credits for plan upgrades or credit purchases, and 'decrement' to reduce credits for refunds or policy violations.
 *
 * @remarks
 */
export type Operation = ClosedEnum<typeof Operation>;

export type V2KeysUpdateCreditsRequestBody = {
  /**
   * The ID of the key to update (begins with `key_`). This is the database reference ID for the key, not the actual API key string that users authenticate with. This ID uniquely identifies which key's credits will be updated.
   */
  keyId: string;
  /**
   * The credit value to use with the specified operation. The meaning depends on the operation: for 'set', this becomes the new remaining credits value; for 'increment', this amount is added to current credits; for 'decrement', this amount is subtracted from current credits.
   *
   * @remarks
   *
   * Set to null when using 'set' operation to make the key unlimited (removes usage restrictions entirely). When decrementing, if the result would be negative, remaining credits are automatically set to zero. Credits are consumed during successful key verification, and when credits reach zero, verification fails with `code=INSUFFICIENT_CREDITS`.
   *
   * Required when using 'increment' or 'decrement' operations. Optional for 'set' operation (null creates unlimited usage).
   */
  value?: number | null | undefined;
  /**
   * Defines how to modify the key's remaining credits. Use 'set' to replace current credits with a specific value or unlimited usage, 'increment' to add credits for plan upgrades or credit purchases, and 'decrement' to reduce credits for refunds or policy violations.
   *
   * @remarks
   */
  operation: Operation;
};

/** @internal */
export const Operation$inboundSchema: z.ZodNativeEnum<typeof Operation> = z
  .nativeEnum(Operation);

/** @internal */
export const Operation$outboundSchema: z.ZodNativeEnum<typeof Operation> =
  Operation$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Operation$ {
  /** @deprecated use `Operation$inboundSchema` instead. */
  export const inboundSchema = Operation$inboundSchema;
  /** @deprecated use `Operation$outboundSchema` instead. */
  export const outboundSchema = Operation$outboundSchema;
}

/** @internal */
export const V2KeysUpdateCreditsRequestBody$inboundSchema: z.ZodType<
  V2KeysUpdateCreditsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  keyId: z.string(),
  value: z.nullable(z.number().int()).optional(),
  operation: Operation$inboundSchema,
});

/** @internal */
export type V2KeysUpdateCreditsRequestBody$Outbound = {
  keyId: string;
  value?: number | null | undefined;
  operation: string;
};

/** @internal */
export const V2KeysUpdateCreditsRequestBody$outboundSchema: z.ZodType<
  V2KeysUpdateCreditsRequestBody$Outbound,
  z.ZodTypeDef,
  V2KeysUpdateCreditsRequestBody
> = z.object({
  keyId: z.string(),
  value: z.nullable(z.number().int()).optional(),
  operation: Operation$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2KeysUpdateCreditsRequestBody$ {
  /** @deprecated use `V2KeysUpdateCreditsRequestBody$inboundSchema` instead. */
  export const inboundSchema = V2KeysUpdateCreditsRequestBody$inboundSchema;
  /** @deprecated use `V2KeysUpdateCreditsRequestBody$outboundSchema` instead. */
  export const outboundSchema = V2KeysUpdateCreditsRequestBody$outboundSchema;
  /** @deprecated use `V2KeysUpdateCreditsRequestBody$Outbound` instead. */
  export type Outbound = V2KeysUpdateCreditsRequestBody$Outbound;
}

export function v2KeysUpdateCreditsRequestBodyToJSON(
  v2KeysUpdateCreditsRequestBody: V2KeysUpdateCreditsRequestBody,
): string {
  return JSON.stringify(
    V2KeysUpdateCreditsRequestBody$outboundSchema.parse(
      v2KeysUpdateCreditsRequestBody,
    ),
  );
}

export function v2KeysUpdateCreditsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<V2KeysUpdateCreditsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2KeysUpdateCreditsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2KeysUpdateCreditsRequestBody' from JSON`,
  );
}
