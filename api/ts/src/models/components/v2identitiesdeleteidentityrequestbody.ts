/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V2IdentitiesDeleteIdentityRequestBody = {
  /**
   * The ID of the identity to delete. This can be either the externalId (from your own system that was used during identity creation) or the identityId (the internal ID returned by the identity service).
   */
  identity: string;
};

/** @internal */
export const V2IdentitiesDeleteIdentityRequestBody$inboundSchema: z.ZodType<
  V2IdentitiesDeleteIdentityRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  identity: z.string(),
});

/** @internal */
export type V2IdentitiesDeleteIdentityRequestBody$Outbound = {
  identity: string;
};

/** @internal */
export const V2IdentitiesDeleteIdentityRequestBody$outboundSchema: z.ZodType<
  V2IdentitiesDeleteIdentityRequestBody$Outbound,
  z.ZodTypeDef,
  V2IdentitiesDeleteIdentityRequestBody
> = z.object({
  identity: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2IdentitiesDeleteIdentityRequestBody$ {
  /** @deprecated use `V2IdentitiesDeleteIdentityRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    V2IdentitiesDeleteIdentityRequestBody$inboundSchema;
  /** @deprecated use `V2IdentitiesDeleteIdentityRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    V2IdentitiesDeleteIdentityRequestBody$outboundSchema;
  /** @deprecated use `V2IdentitiesDeleteIdentityRequestBody$Outbound` instead. */
  export type Outbound = V2IdentitiesDeleteIdentityRequestBody$Outbound;
}

export function v2IdentitiesDeleteIdentityRequestBodyToJSON(
  v2IdentitiesDeleteIdentityRequestBody: V2IdentitiesDeleteIdentityRequestBody,
): string {
  return JSON.stringify(
    V2IdentitiesDeleteIdentityRequestBody$outboundSchema.parse(
      v2IdentitiesDeleteIdentityRequestBody,
    ),
  );
}

export function v2IdentitiesDeleteIdentityRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<V2IdentitiesDeleteIdentityRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      V2IdentitiesDeleteIdentityRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2IdentitiesDeleteIdentityRequestBody' from JSON`,
  );
}
