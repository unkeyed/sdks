/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V2KeysRemovePermissionsRequestBody = {
  /**
   * Specifies which key to remove permissions from using the database identifier returned from `keys.createKey`.
   *
   * @remarks
   * Do not confuse this with the actual API key string that users include in requests.
   */
  keyId: string;
  /**
   * Removes direct permissions from the key without affecting role-based permissions.
   *
   * @remarks
   *
   * You can either use a permission slug, or the permission ID.
   *
   * After removal, verification checks for these permissions will fail unless granted through roles.
   */
  permissions: Array<string>;
};

/** @internal */
export const V2KeysRemovePermissionsRequestBody$inboundSchema: z.ZodType<
  V2KeysRemovePermissionsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  keyId: z.string(),
  permissions: z.array(z.string()),
});

/** @internal */
export type V2KeysRemovePermissionsRequestBody$Outbound = {
  keyId: string;
  permissions: Array<string>;
};

/** @internal */
export const V2KeysRemovePermissionsRequestBody$outboundSchema: z.ZodType<
  V2KeysRemovePermissionsRequestBody$Outbound,
  z.ZodTypeDef,
  V2KeysRemovePermissionsRequestBody
> = z.object({
  keyId: z.string(),
  permissions: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2KeysRemovePermissionsRequestBody$ {
  /** @deprecated use `V2KeysRemovePermissionsRequestBody$inboundSchema` instead. */
  export const inboundSchema = V2KeysRemovePermissionsRequestBody$inboundSchema;
  /** @deprecated use `V2KeysRemovePermissionsRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    V2KeysRemovePermissionsRequestBody$outboundSchema;
  /** @deprecated use `V2KeysRemovePermissionsRequestBody$Outbound` instead. */
  export type Outbound = V2KeysRemovePermissionsRequestBody$Outbound;
}

export function v2KeysRemovePermissionsRequestBodyToJSON(
  v2KeysRemovePermissionsRequestBody: V2KeysRemovePermissionsRequestBody,
): string {
  return JSON.stringify(
    V2KeysRemovePermissionsRequestBody$outboundSchema.parse(
      v2KeysRemovePermissionsRequestBody,
    ),
  );
}

export function v2KeysRemovePermissionsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<V2KeysRemovePermissionsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      V2KeysRemovePermissionsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2KeysRemovePermissionsRequestBody' from JSON`,
  );
}
