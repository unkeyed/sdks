/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Meta,
  Meta$inboundSchema,
  Meta$Outbound,
  Meta$outboundSchema,
} from "./meta.js";
import {
  Role,
  Role$inboundSchema,
  Role$Outbound,
  Role$outboundSchema,
} from "./role.js";

export type V2KeysRemoveRolesResponseBody = {
  /**
   * Metadata object included in every API response. This provides context about the request and is essential for debugging, audit trails, and support inquiries. The `requestId` is particularly important when troubleshooting issues with the Unkey support team.
   */
  meta: Meta;
  /**
   * Complete list of all roles directly assigned to the key after the removal operation completes.
   *
   * @remarks
   *
   * The response includes:
   * - The remaining roles still assigned to the key (after removing the specified roles)
   * - Both ID and name for each role for easy reference
   *
   * Important notes:
   * - The response reflects the current state after the removal operation
   * - An empty array indicates the key now has no roles assigned
   * - This only shows direct role assignments
   * - Role permissions are not expanded in this response - use keys.getKey for full details
   * - Changes take effect immediately for new verifications but cached sessions may retain old permissions briefly
   */
  data: Array<Role>;
};

/** @internal */
export const V2KeysRemoveRolesResponseBody$inboundSchema: z.ZodType<
  V2KeysRemoveRolesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  meta: Meta$inboundSchema,
  data: z.array(Role$inboundSchema),
});

/** @internal */
export type V2KeysRemoveRolesResponseBody$Outbound = {
  meta: Meta$Outbound;
  data: Array<Role$Outbound>;
};

/** @internal */
export const V2KeysRemoveRolesResponseBody$outboundSchema: z.ZodType<
  V2KeysRemoveRolesResponseBody$Outbound,
  z.ZodTypeDef,
  V2KeysRemoveRolesResponseBody
> = z.object({
  meta: Meta$outboundSchema,
  data: z.array(Role$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2KeysRemoveRolesResponseBody$ {
  /** @deprecated use `V2KeysRemoveRolesResponseBody$inboundSchema` instead. */
  export const inboundSchema = V2KeysRemoveRolesResponseBody$inboundSchema;
  /** @deprecated use `V2KeysRemoveRolesResponseBody$outboundSchema` instead. */
  export const outboundSchema = V2KeysRemoveRolesResponseBody$outboundSchema;
  /** @deprecated use `V2KeysRemoveRolesResponseBody$Outbound` instead. */
  export type Outbound = V2KeysRemoveRolesResponseBody$Outbound;
}

export function v2KeysRemoveRolesResponseBodyToJSON(
  v2KeysRemoveRolesResponseBody: V2KeysRemoveRolesResponseBody,
): string {
  return JSON.stringify(
    V2KeysRemoveRolesResponseBody$outboundSchema.parse(
      v2KeysRemoveRolesResponseBody,
    ),
  );
}

export function v2KeysRemoveRolesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<V2KeysRemoveRolesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2KeysRemoveRolesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2KeysRemoveRolesResponseBody' from JSON`,
  );
}
