/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Role,
  Role$inboundSchema,
  Role$Outbound,
  Role$outboundSchema,
} from "./role.js";

/**
 * Complete role details including assigned permissions.
 */
export type V2PermissionsGetRoleResponseData = {
  role: Role;
};

/** @internal */
export const V2PermissionsGetRoleResponseData$inboundSchema: z.ZodType<
  V2PermissionsGetRoleResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: Role$inboundSchema,
});

/** @internal */
export type V2PermissionsGetRoleResponseData$Outbound = {
  role: Role$Outbound;
};

/** @internal */
export const V2PermissionsGetRoleResponseData$outboundSchema: z.ZodType<
  V2PermissionsGetRoleResponseData$Outbound,
  z.ZodTypeDef,
  V2PermissionsGetRoleResponseData
> = z.object({
  role: Role$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2PermissionsGetRoleResponseData$ {
  /** @deprecated use `V2PermissionsGetRoleResponseData$inboundSchema` instead. */
  export const inboundSchema = V2PermissionsGetRoleResponseData$inboundSchema;
  /** @deprecated use `V2PermissionsGetRoleResponseData$outboundSchema` instead. */
  export const outboundSchema = V2PermissionsGetRoleResponseData$outboundSchema;
  /** @deprecated use `V2PermissionsGetRoleResponseData$Outbound` instead. */
  export type Outbound = V2PermissionsGetRoleResponseData$Outbound;
}

export function v2PermissionsGetRoleResponseDataToJSON(
  v2PermissionsGetRoleResponseData: V2PermissionsGetRoleResponseData,
): string {
  return JSON.stringify(
    V2PermissionsGetRoleResponseData$outboundSchema.parse(
      v2PermissionsGetRoleResponseData,
    ),
  );
}

export function v2PermissionsGetRoleResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<V2PermissionsGetRoleResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2PermissionsGetRoleResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2PermissionsGetRoleResponseData' from JSON`,
  );
}
