/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Controls credit consumption for usage-based billing and quota enforcement.
 *
 * @remarks
 * Omitting this field uses the default cost of 1 credit per verification.
 * Credits provide globally consistent usage tracking, essential for paid APIs with strict quotas.
 */
export type KeysVerifyKeyCredits = {
  /**
   * Sets how many credits to deduct for this verification request.
   *
   * @remarks
   * Use 0 for read-only operations or free tier access, higher values for premium features.
   * Credits are deducted after all security checks pass.
   * Essential for implementing usage-based pricing with different operation costs.
   */
  cost: number;
};

/** @internal */
export const KeysVerifyKeyCredits$inboundSchema: z.ZodType<
  KeysVerifyKeyCredits,
  z.ZodTypeDef,
  unknown
> = z.object({
  cost: z.number().int(),
});

/** @internal */
export type KeysVerifyKeyCredits$Outbound = {
  cost: number;
};

/** @internal */
export const KeysVerifyKeyCredits$outboundSchema: z.ZodType<
  KeysVerifyKeyCredits$Outbound,
  z.ZodTypeDef,
  KeysVerifyKeyCredits
> = z.object({
  cost: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KeysVerifyKeyCredits$ {
  /** @deprecated use `KeysVerifyKeyCredits$inboundSchema` instead. */
  export const inboundSchema = KeysVerifyKeyCredits$inboundSchema;
  /** @deprecated use `KeysVerifyKeyCredits$outboundSchema` instead. */
  export const outboundSchema = KeysVerifyKeyCredits$outboundSchema;
  /** @deprecated use `KeysVerifyKeyCredits$Outbound` instead. */
  export type Outbound = KeysVerifyKeyCredits$Outbound;
}

export function keysVerifyKeyCreditsToJSON(
  keysVerifyKeyCredits: KeysVerifyKeyCredits,
): string {
  return JSON.stringify(
    KeysVerifyKeyCredits$outboundSchema.parse(keysVerifyKeyCredits),
  );
}

export function keysVerifyKeyCreditsFromJSON(
  jsonString: string,
): SafeParseResult<KeysVerifyKeyCredits, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => KeysVerifyKeyCredits$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'KeysVerifyKeyCredits' from JSON`,
  );
}
