/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Identity,
  Identity$inboundSchema,
  Identity$Outbound,
  Identity$outboundSchema,
} from "./identity.js";
import {
  KeyCreditsData,
  KeyCreditsData$inboundSchema,
  KeyCreditsData$Outbound,
  KeyCreditsData$outboundSchema,
} from "./keycreditsdata.js";
import {
  RatelimitResponse,
  RatelimitResponse$inboundSchema,
  RatelimitResponse$Outbound,
  RatelimitResponse$outboundSchema,
} from "./ratelimitresponse.js";

export type KeyResponseData = {
  /**
   * Unique identifier for this key.
   */
  keyId: string;
  /**
   * First few characters of the key for identification.
   */
  start: string;
  /**
   * Whether the key is enabled or disabled.
   */
  enabled: boolean;
  /**
   * Human-readable name for this key.
   */
  name?: string | undefined;
  /**
   * Custom metadata associated with this key.
   */
  meta?: { [k: string]: any } | undefined;
  /**
   * Unix timestamp in milliseconds when key was created.
   */
  createdAt: number;
  /**
   * Unix timestamp in milliseconds when key was last updated.
   */
  updatedAt?: number | undefined;
  /**
   * Unix timestamp in milliseconds when key expires (if set).
   */
  expires?: number | undefined;
  /**
   * External identifier linking this key to an entity in your system.
   */
  externalId?: string | undefined;
  permissions?: Array<string> | undefined;
  roles?: Array<string> | undefined;
  /**
   * Credit configuration and remaining balance for this key.
   */
  credits?: KeyCreditsData | undefined;
  identity?: Identity | undefined;
  /**
   * Decrypted key value (only when decrypt=true).
   */
  plaintext?: string | undefined;
  ratelimits?: Array<RatelimitResponse> | undefined;
};

/** @internal */
export const KeyResponseData$inboundSchema: z.ZodType<
  KeyResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  keyId: z.string(),
  start: z.string(),
  enabled: z.boolean(),
  name: z.string().optional(),
  meta: z.record(z.any()).optional(),
  createdAt: z.number().int(),
  updatedAt: z.number().int().optional(),
  expires: z.number().int().optional(),
  externalId: z.string().optional(),
  permissions: z.array(z.string()).optional(),
  roles: z.array(z.string()).optional(),
  credits: KeyCreditsData$inboundSchema.optional(),
  identity: Identity$inboundSchema.optional(),
  plaintext: z.string().optional(),
  ratelimits: z.array(RatelimitResponse$inboundSchema).optional(),
});

/** @internal */
export type KeyResponseData$Outbound = {
  keyId: string;
  start: string;
  enabled: boolean;
  name?: string | undefined;
  meta?: { [k: string]: any } | undefined;
  createdAt: number;
  updatedAt?: number | undefined;
  expires?: number | undefined;
  externalId?: string | undefined;
  permissions?: Array<string> | undefined;
  roles?: Array<string> | undefined;
  credits?: KeyCreditsData$Outbound | undefined;
  identity?: Identity$Outbound | undefined;
  plaintext?: string | undefined;
  ratelimits?: Array<RatelimitResponse$Outbound> | undefined;
};

/** @internal */
export const KeyResponseData$outboundSchema: z.ZodType<
  KeyResponseData$Outbound,
  z.ZodTypeDef,
  KeyResponseData
> = z.object({
  keyId: z.string(),
  start: z.string(),
  enabled: z.boolean(),
  name: z.string().optional(),
  meta: z.record(z.any()).optional(),
  createdAt: z.number().int(),
  updatedAt: z.number().int().optional(),
  expires: z.number().int().optional(),
  externalId: z.string().optional(),
  permissions: z.array(z.string()).optional(),
  roles: z.array(z.string()).optional(),
  credits: KeyCreditsData$outboundSchema.optional(),
  identity: Identity$outboundSchema.optional(),
  plaintext: z.string().optional(),
  ratelimits: z.array(RatelimitResponse$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KeyResponseData$ {
  /** @deprecated use `KeyResponseData$inboundSchema` instead. */
  export const inboundSchema = KeyResponseData$inboundSchema;
  /** @deprecated use `KeyResponseData$outboundSchema` instead. */
  export const outboundSchema = KeyResponseData$outboundSchema;
  /** @deprecated use `KeyResponseData$Outbound` instead. */
  export type Outbound = KeyResponseData$Outbound;
}

export function keyResponseDataToJSON(
  keyResponseData: KeyResponseData,
): string {
  return JSON.stringify(KeyResponseData$outboundSchema.parse(keyResponseData));
}

export function keyResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<KeyResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => KeyResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'KeyResponseData' from JSON`,
  );
}
