/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Meta,
  Meta$inboundSchema,
  Meta$Outbound,
  Meta$outboundSchema,
} from "./meta.js";
import {
  Role,
  Role$inboundSchema,
  Role$Outbound,
  Role$outboundSchema,
} from "./role.js";

export type V2KeysSetRolesResponseBody = {
  /**
   * Metadata object included in every API response. This provides context about the request and is essential for debugging, audit trails, and support inquiries. The `requestId` is particularly important when troubleshooting issues with the Unkey support team.
   */
  meta: Meta;
  /**
   * Complete list of all roles now directly assigned to the key after the set operation has completed.
   *
   * @remarks
   *
   * The response includes:
   * - The comprehensive, updated set of roles (reflecting the complete replacement)
   * - Both ID and name for each role for easy reference
   *
   * Important notes:
   * - This response shows the final state after the complete replacement
   * - If you provided an empty array in the request, this will also be empty
   * - This only shows direct role assignments on the key
   * - Role permissions are not expanded in this response - use keys.getKey for complete details
   * - An empty array indicates the key now has no roles assigned at all
   */
  data: Array<Role>;
};

/** @internal */
export const V2KeysSetRolesResponseBody$inboundSchema: z.ZodType<
  V2KeysSetRolesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  meta: Meta$inboundSchema,
  data: z.array(Role$inboundSchema),
});

/** @internal */
export type V2KeysSetRolesResponseBody$Outbound = {
  meta: Meta$Outbound;
  data: Array<Role$Outbound>;
};

/** @internal */
export const V2KeysSetRolesResponseBody$outboundSchema: z.ZodType<
  V2KeysSetRolesResponseBody$Outbound,
  z.ZodTypeDef,
  V2KeysSetRolesResponseBody
> = z.object({
  meta: Meta$outboundSchema,
  data: z.array(Role$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2KeysSetRolesResponseBody$ {
  /** @deprecated use `V2KeysSetRolesResponseBody$inboundSchema` instead. */
  export const inboundSchema = V2KeysSetRolesResponseBody$inboundSchema;
  /** @deprecated use `V2KeysSetRolesResponseBody$outboundSchema` instead. */
  export const outboundSchema = V2KeysSetRolesResponseBody$outboundSchema;
  /** @deprecated use `V2KeysSetRolesResponseBody$Outbound` instead. */
  export type Outbound = V2KeysSetRolesResponseBody$Outbound;
}

export function v2KeysSetRolesResponseBodyToJSON(
  v2KeysSetRolesResponseBody: V2KeysSetRolesResponseBody,
): string {
  return JSON.stringify(
    V2KeysSetRolesResponseBody$outboundSchema.parse(v2KeysSetRolesResponseBody),
  );
}

export function v2KeysSetRolesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<V2KeysSetRolesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2KeysSetRolesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2KeysSetRolesResponseBody' from JSON`,
  );
}
