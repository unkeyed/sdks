/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V2KeysWhoamiRequestBody = {
  /**
   * The complete API key string provided by you, including any prefix.
   *
   * @remarks
   * Never log, cache, or store API keys in your system as they provide full access to user resources.
   * Include the full key exactly as provided - even minor modifications will cause a not found error.
   */
  key: string;
};

/** @internal */
export const V2KeysWhoamiRequestBody$inboundSchema: z.ZodType<
  V2KeysWhoamiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
});

/** @internal */
export type V2KeysWhoamiRequestBody$Outbound = {
  key: string;
};

/** @internal */
export const V2KeysWhoamiRequestBody$outboundSchema: z.ZodType<
  V2KeysWhoamiRequestBody$Outbound,
  z.ZodTypeDef,
  V2KeysWhoamiRequestBody
> = z.object({
  key: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2KeysWhoamiRequestBody$ {
  /** @deprecated use `V2KeysWhoamiRequestBody$inboundSchema` instead. */
  export const inboundSchema = V2KeysWhoamiRequestBody$inboundSchema;
  /** @deprecated use `V2KeysWhoamiRequestBody$outboundSchema` instead. */
  export const outboundSchema = V2KeysWhoamiRequestBody$outboundSchema;
  /** @deprecated use `V2KeysWhoamiRequestBody$Outbound` instead. */
  export type Outbound = V2KeysWhoamiRequestBody$Outbound;
}

export function v2KeysWhoamiRequestBodyToJSON(
  v2KeysWhoamiRequestBody: V2KeysWhoamiRequestBody,
): string {
  return JSON.stringify(
    V2KeysWhoamiRequestBody$outboundSchema.parse(v2KeysWhoamiRequestBody),
  );
}

export function v2KeysWhoamiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<V2KeysWhoamiRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2KeysWhoamiRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2KeysWhoamiRequestBody' from JSON`,
  );
}
