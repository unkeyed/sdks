/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RatelimitResponse,
  RatelimitResponse$inboundSchema,
  RatelimitResponse$Outbound,
  RatelimitResponse$outboundSchema,
} from "./ratelimitresponse.js";

export type V2IdentitiesGetIdentityResponseData = {
  /**
   * The external identifier for this identity in your system. This is the ID you provided during identity creation.
   */
  externalId: string;
  /**
   * Custom metadata associated with this identity. This can include any JSON-serializable data you stored with the identity during creation or updates.
   */
  meta?: { [k: string]: any } | undefined;
  /**
   * Rate limits associated with this identity. These limits are shared across all API keys linked to this identity, providing consistent rate limiting regardless of which key is used.
   */
  ratelimits?: Array<RatelimitResponse> | undefined;
};

/** @internal */
export const V2IdentitiesGetIdentityResponseData$inboundSchema: z.ZodType<
  V2IdentitiesGetIdentityResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  externalId: z.string(),
  meta: z.record(z.any()).optional(),
  ratelimits: z.array(RatelimitResponse$inboundSchema).optional(),
});

/** @internal */
export type V2IdentitiesGetIdentityResponseData$Outbound = {
  externalId: string;
  meta?: { [k: string]: any } | undefined;
  ratelimits?: Array<RatelimitResponse$Outbound> | undefined;
};

/** @internal */
export const V2IdentitiesGetIdentityResponseData$outboundSchema: z.ZodType<
  V2IdentitiesGetIdentityResponseData$Outbound,
  z.ZodTypeDef,
  V2IdentitiesGetIdentityResponseData
> = z.object({
  externalId: z.string(),
  meta: z.record(z.any()).optional(),
  ratelimits: z.array(RatelimitResponse$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2IdentitiesGetIdentityResponseData$ {
  /** @deprecated use `V2IdentitiesGetIdentityResponseData$inboundSchema` instead. */
  export const inboundSchema =
    V2IdentitiesGetIdentityResponseData$inboundSchema;
  /** @deprecated use `V2IdentitiesGetIdentityResponseData$outboundSchema` instead. */
  export const outboundSchema =
    V2IdentitiesGetIdentityResponseData$outboundSchema;
  /** @deprecated use `V2IdentitiesGetIdentityResponseData$Outbound` instead. */
  export type Outbound = V2IdentitiesGetIdentityResponseData$Outbound;
}

export function v2IdentitiesGetIdentityResponseDataToJSON(
  v2IdentitiesGetIdentityResponseData: V2IdentitiesGetIdentityResponseData,
): string {
  return JSON.stringify(
    V2IdentitiesGetIdentityResponseData$outboundSchema.parse(
      v2IdentitiesGetIdentityResponseData,
    ),
  );
}

export function v2IdentitiesGetIdentityResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<V2IdentitiesGetIdentityResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      V2IdentitiesGetIdentityResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2IdentitiesGetIdentityResponseData' from JSON`,
  );
}
