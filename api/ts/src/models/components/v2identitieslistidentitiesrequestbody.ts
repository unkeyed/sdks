/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V2IdentitiesListIdentitiesRequestBody = {
  /**
   * The maximum number of identities to return in a single request. Use this to control response size and loading performance.
   */
  limit?: number | undefined;
  /**
   * Pagination cursor from a previous response. Use this to fetch subsequent pages of results when the response contains a cursor value.
   */
  cursor?: string | undefined;
};

/** @internal */
export const V2IdentitiesListIdentitiesRequestBody$inboundSchema: z.ZodType<
  V2IdentitiesListIdentitiesRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  limit: z.number().int().default(100),
  cursor: z.string().optional(),
});

/** @internal */
export type V2IdentitiesListIdentitiesRequestBody$Outbound = {
  limit: number;
  cursor?: string | undefined;
};

/** @internal */
export const V2IdentitiesListIdentitiesRequestBody$outboundSchema: z.ZodType<
  V2IdentitiesListIdentitiesRequestBody$Outbound,
  z.ZodTypeDef,
  V2IdentitiesListIdentitiesRequestBody
> = z.object({
  limit: z.number().int().default(100),
  cursor: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2IdentitiesListIdentitiesRequestBody$ {
  /** @deprecated use `V2IdentitiesListIdentitiesRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    V2IdentitiesListIdentitiesRequestBody$inboundSchema;
  /** @deprecated use `V2IdentitiesListIdentitiesRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    V2IdentitiesListIdentitiesRequestBody$outboundSchema;
  /** @deprecated use `V2IdentitiesListIdentitiesRequestBody$Outbound` instead. */
  export type Outbound = V2IdentitiesListIdentitiesRequestBody$Outbound;
}

export function v2IdentitiesListIdentitiesRequestBodyToJSON(
  v2IdentitiesListIdentitiesRequestBody: V2IdentitiesListIdentitiesRequestBody,
): string {
  return JSON.stringify(
    V2IdentitiesListIdentitiesRequestBody$outboundSchema.parse(
      v2IdentitiesListIdentitiesRequestBody,
    ),
  );
}

export function v2IdentitiesListIdentitiesRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<V2IdentitiesListIdentitiesRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      V2IdentitiesListIdentitiesRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2IdentitiesListIdentitiesRequestBody' from JSON`,
  );
}
