/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RatelimitResponse = {
  /**
   * Unique identifier for this rate limit configuration.
   */
  id: string;
  /**
   * Human-readable name for this rate limit.
   */
  name: string;
  /**
   * Maximum requests allowed within the time window.
   */
  limit: number;
  /**
   * Rate limit window duration in milliseconds.
   */
  duration: number;
  /**
   * Whether this rate limit was automatically applied when verifying the key.
   */
  autoApply: boolean;
};

/** @internal */
export const RatelimitResponse$inboundSchema: z.ZodType<
  RatelimitResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  limit: z.number().int(),
  duration: z.number().int(),
  autoApply: z.boolean(),
});

/** @internal */
export type RatelimitResponse$Outbound = {
  id: string;
  name: string;
  limit: number;
  duration: number;
  autoApply: boolean;
};

/** @internal */
export const RatelimitResponse$outboundSchema: z.ZodType<
  RatelimitResponse$Outbound,
  z.ZodTypeDef,
  RatelimitResponse
> = z.object({
  id: z.string(),
  name: z.string(),
  limit: z.number().int(),
  duration: z.number().int(),
  autoApply: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RatelimitResponse$ {
  /** @deprecated use `RatelimitResponse$inboundSchema` instead. */
  export const inboundSchema = RatelimitResponse$inboundSchema;
  /** @deprecated use `RatelimitResponse$outboundSchema` instead. */
  export const outboundSchema = RatelimitResponse$outboundSchema;
  /** @deprecated use `RatelimitResponse$Outbound` instead. */
  export type Outbound = RatelimitResponse$Outbound;
}

export function ratelimitResponseToJSON(
  ratelimitResponse: RatelimitResponse,
): string {
  return JSON.stringify(
    RatelimitResponse$outboundSchema.parse(ratelimitResponse),
  );
}

export function ratelimitResponseFromJSON(
  jsonString: string,
): SafeParseResult<RatelimitResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RatelimitResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RatelimitResponse' from JSON`,
  );
}
