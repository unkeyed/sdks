/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { keysVerifyKey } from "../../funcs/keysVerifyKey.js";
import * as components from "../../models/components/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: components.V2KeysVerifyKeyRequestBody$inboundSchema,
};

export const tool$keysVerifyKey: ToolDefinition<typeof args> = {
  name: "keys-verify-key",
  description: `Verify API key

Verify an API key's validity and permissions for request authentication.

Use this endpoint on every incoming request to your protected resources. It checks key validity, permissions, rate limits, and usage quotas in a single call.

**Important**: Always returns HTTP 200. Check the \`valid\` field in response data to determine if the key is authorized.

**Common use cases:**
- Authenticate API requests before processing
- Enforce permission-based access control
- Track usage and apply rate limits

**Required Permissions**

Your root key needs one of:
- \`api.*.verify_key\` (verify keys in any API)
- \`api.<api_id>.verify_key\` (verify keys in specific API)

If you are getting a NOT_FOUND error, ensure your root key has the required verify key permissions.
`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await keysVerifyKey(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
