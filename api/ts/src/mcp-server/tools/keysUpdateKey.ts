/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { keysUpdateKey } from "../../funcs/keysUpdateKey.js";
import * as components from "../../models/components/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: components.V2KeysUpdateKeyRequestBody$inboundSchema,
};

export const tool$keysUpdateKey: ToolDefinition<typeof args> = {
  name: "keys-update-key",
  description: `Update key settings

Update key properties in response to plan changes, subscription updates, or account status changes.

Use this for user upgrades/downgrades, role modifications, or administrative changes. Supports partial updates - only specify fields you want to change. Set fields to null to clear them.

**Important**: Permissions and roles are replaced entirely. Use dedicated add/remove endpoints for incremental changes.

**Required Permissions**

Your root key must have one of the following permissions:
- \`api.*.update_key\` (to update keys in any API)
- \`api.<api_id>.update_key\` (to update keys in a specific API)

**Side Effects**

If you specify an \`externalId\` that doesn't exist, a new identity will be automatically created and linked to the key. Permission updates will auto-create any permissions that don't exist in your workspace. Changes take effect immediately but may take up to 30 seconds to propagate to all edge regions due to cache invalidation.
`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await keysUpdateKey(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
