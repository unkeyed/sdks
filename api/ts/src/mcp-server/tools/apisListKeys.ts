/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { apisListKeys } from "../../funcs/apisListKeys.js";
import * as components from "../../models/components/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: components.V2ApisListKeysRequestBody$inboundSchema,
};

export const tool$apisListKeys: ToolDefinition<typeof args> = {
  name: "apis-list-keys",
  description: `List API keys

Retrieve a paginated list of API keys for dashboard and administrative interfaces.

Use this to build key management dashboards, filter keys by user with \`externalId\`, or retrieve key details for administrative purposes. Each key includes status, metadata, permissions, and usage limits.

**Important**: Set \`decrypt: true\` only in secure contexts to retrieve plaintext key values from recoverable keys.

**Required Permissions**

Your root key must have one of the following permissions for basic key listing:
- \`api.*.read_key\` (to read keys from any API)
- \`api.<api_id>.read_key\` (to read keys from a specific API)

Additionally, you need read access to the API itself:
- \`api.*.read_api\` or \`api.<api_id>.read_api\`

Additional permission required for decrypt functionality:
- \`api.*.decrypt_key\` or \`api.<api_id>.decrypt_key\`
`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await apisListKeys(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
