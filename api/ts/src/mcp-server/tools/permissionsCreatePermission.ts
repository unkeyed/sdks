/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { permissionsCreatePermission } from "../../funcs/permissionsCreatePermission.js";
import * as components from "../../models/components/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: components.V2PermissionsCreatePermissionRequestBody$inboundSchema,
};

export const tool$permissionsCreatePermission: ToolDefinition<typeof args> = {
  name: "permissions-create-permission",
  description: `Create permission

Create a new permission to define specific actions or capabilities in your RBAC system. Permissions can be assigned directly to API keys or included in roles.

Use hierarchical naming patterns like \`documents.read\`, \`admin.users.delete\`, or \`billing.invoices.create\` for clear organization.

**Important:** Permission names must be unique within the workspace. Once created, permissions are immediately available for assignment.

**Required Permissions**

Your root key must have the following permission:
- \`rbac.*.create_permission\`
`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await permissionsCreatePermission(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
