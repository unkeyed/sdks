/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { keysGetKey } from "../../funcs/keysGetKey.js";
import * as components from "../../models/components/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: components.V2KeysGetKeyRequestBody$inboundSchema,
};

export const tool$keysGetKey: ToolDefinition<typeof args> = {
  name: "keys-get-key",
  description: `Get API key

Retrieve detailed key information for dashboard interfaces and administrative purposes.

Use this to build key management dashboards showing users their key details, status, permissions, and usage data. You can identify keys by \`keyId\` or the actual key string.

**Important**: Set \`decrypt: true\` only in secure contexts to retrieve plaintext key values from recoverable keys.

**Required Permissions**

Your root key must have one of the following permissions for basic key information:
- \`api.*.read_key\` (to read keys from any API)
- \`api.<api_id>.read_key\` (to read keys from a specific API)

Additional permission required for decrypt functionality:
- \`api.*.decrypt_key\` or \`api.<api_id>.decrypt_key\`
`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await keysGetKey(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
