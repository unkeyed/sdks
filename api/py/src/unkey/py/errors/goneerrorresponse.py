"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from dataclasses import dataclass, field
import httpx
from typing import Optional
from unkey.py.errors import UnkeyError
from unkey.py.models import baseerror as models_baseerror, meta as models_meta
from unkey.py.types import BaseModel


class GoneErrorResponseData(BaseModel):
    meta: models_meta.Meta
    r"""Metadata object included in every API response. This provides context about the request and is essential for debugging, audit trails, and support inquiries. The `requestId` is particularly important when troubleshooting issues with the Unkey support team."""

    error: models_baseerror.BaseError
    r"""Base error structure following Problem Details for HTTP APIs (RFC 7807). This provides a standardized way to carry machine-readable details of errors in HTTP response content."""


@dataclass(frozen=True)
class GoneErrorResponse(UnkeyError):
    r"""Error response when the requested resource has been soft-deleted and is no longer available. This occurs when:
    - The resource has been marked as deleted but still exists in the database
    - The resource is intentionally unavailable but could potentially be restored
    - The resource cannot be restored through the API or dashboard

    To resolve this error, contact support if you need the resource restored.
    """

    data: GoneErrorResponseData = field(hash=False)

    def __init__(
        self,
        data: GoneErrorResponseData,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        object.__setattr__(self, "data", data)
