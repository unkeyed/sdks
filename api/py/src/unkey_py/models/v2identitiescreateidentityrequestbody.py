"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .ratelimit import Ratelimit, RatelimitTypedDict
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict
from unkey_py.types import BaseModel


class V2IdentitiesCreateIdentityRequestBodyMetaTypedDict(TypedDict):
    r"""Attach metadata to this identity that you need to have access to when verifying a key.

    This will be returned as part of the `verifyKey` response.

    """


class V2IdentitiesCreateIdentityRequestBodyMeta(BaseModel):
    r"""Attach metadata to this identity that you need to have access to when verifying a key.

    This will be returned as part of the `verifyKey` response.

    """


class V2IdentitiesCreateIdentityRequestBodyTypedDict(TypedDict):
    external_id: str
    r"""The id of this identity in your system.

    This usually comes from your authentication provider and could be a userId, organisationId or even an email.
    It does not matter what you use, as long as it uniquely identifies something in your application.

    `externalId`s are unique across your workspace and therefore a `CONFLICT` error is returned when you try to create duplicates.

    """
    meta: NotRequired[V2IdentitiesCreateIdentityRequestBodyMetaTypedDict]
    r"""Attach metadata to this identity that you need to have access to when verifying a key.

    This will be returned as part of the `verifyKey` response.

    """
    ratelimits: NotRequired[List[RatelimitTypedDict]]
    r"""Attach ratelimits to this identity.

    When verifying keys, you can specify which limits you want to use and all keys attached to this identity, will share the limits.
    """


class V2IdentitiesCreateIdentityRequestBody(BaseModel):
    external_id: Annotated[str, pydantic.Field(alias="externalId")]
    r"""The id of this identity in your system.

    This usually comes from your authentication provider and could be a userId, organisationId or even an email.
    It does not matter what you use, as long as it uniquely identifies something in your application.

    `externalId`s are unique across your workspace and therefore a `CONFLICT` error is returned when you try to create duplicates.

    """

    meta: Optional[V2IdentitiesCreateIdentityRequestBodyMeta] = None
    r"""Attach metadata to this identity that you need to have access to when verifying a key.

    This will be returned as part of the `verifyKey` response.

    """

    ratelimits: Optional[List[Ratelimit]] = None
    r"""Attach ratelimits to this identity.

    When verifying keys, you can specify which limits you want to use and all keys attached to this identity, will share the limits.
    """
