"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from typing import Any, List, Mapping, Optional, Union, cast
from unkey_py import errors, models, utils
from unkey_py._hooks import HookContext
from unkey_py.types import BaseModel, OptionalNullable, UNSET


class Identities(BaseSDK):
    def create_identity(
        self,
        *,
        external_id: str,
        meta: Optional[
            Union[
                models.V2IdentitiesCreateIdentityRequestBodyMeta,
                models.V2IdentitiesCreateIdentityRequestBodyMetaTypedDict,
            ]
        ] = None,
        ratelimits: Optional[
            Union[List[models.Ratelimit], List[models.RatelimitTypedDict]]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.V2IdentitiesCreateIdentityResponseBody:
        r"""
        :param external_id: The id of this identity in your system.  This usually comes from your authentication provider and could be a userId, organisationId or even an email. It does not matter what you use, as long as it uniquely identifies something in your application.  `externalId`s are unique across your workspace and therefore a `CONFLICT` error is returned when you try to create duplicates.
        :param meta: Attach metadata to this identity that you need to have access to when verifying a key.  This will be returned as part of the `verifyKey` response.
        :param ratelimits: Attach ratelimits to this identity.  When verifying keys, you can specify which limits you want to use and all keys attached to this identity, will share the limits.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.V2IdentitiesCreateIdentityRequestBody(
            external_id=external_id,
            meta=utils.get_pydantic_model(
                meta, Optional[models.V2IdentitiesCreateIdentityRequestBodyMeta]
            ),
            ratelimits=utils.get_pydantic_model(
                ratelimits, Optional[List[models.Ratelimit]]
            ),
        )

        req = self._build_request(
            method="POST",
            path="/v2/identities.createIdentity",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request,
                False,
                False,
                "json",
                models.V2IdentitiesCreateIdentityRequestBody,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(50, 1000, 1.5, 10000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["5XX"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="identities.createIdentity",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "401", "403", "409", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, models.V2IdentitiesCreateIdentityResponseBody
            )
        if utils.match_response(http_res, "400", "application/problem+json"):
            response_data = utils.unmarshal_json(
                http_res.text, errors.BadRequestErrorResponseData
            )
            raise errors.BadRequestErrorResponse(data=response_data)
        if utils.match_response(http_res, "401", "application/problem+json"):
            response_data = utils.unmarshal_json(
                http_res.text, errors.UnauthorizedErrorResponseData
            )
            raise errors.UnauthorizedErrorResponse(data=response_data)
        if utils.match_response(http_res, "403", "application/problem+json"):
            response_data = utils.unmarshal_json(
                http_res.text, errors.ForbiddenErrorResponseData
            )
            raise errors.ForbiddenErrorResponse(data=response_data)
        if utils.match_response(http_res, "409", "application/problem+json"):
            response_data = utils.unmarshal_json(
                http_res.text, errors.ConflictErrorResponseData
            )
            raise errors.ConflictErrorResponse(data=response_data)
        if utils.match_response(http_res, "500", "application/problem+json"):
            response_data = utils.unmarshal_json(
                http_res.text, errors.InternalServerErrorResponseData
            )
            raise errors.InternalServerErrorResponse(data=response_data)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise errors.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def create_identity_async(
        self,
        *,
        external_id: str,
        meta: Optional[
            Union[
                models.V2IdentitiesCreateIdentityRequestBodyMeta,
                models.V2IdentitiesCreateIdentityRequestBodyMetaTypedDict,
            ]
        ] = None,
        ratelimits: Optional[
            Union[List[models.Ratelimit], List[models.RatelimitTypedDict]]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.V2IdentitiesCreateIdentityResponseBody:
        r"""
        :param external_id: The id of this identity in your system.  This usually comes from your authentication provider and could be a userId, organisationId or even an email. It does not matter what you use, as long as it uniquely identifies something in your application.  `externalId`s are unique across your workspace and therefore a `CONFLICT` error is returned when you try to create duplicates.
        :param meta: Attach metadata to this identity that you need to have access to when verifying a key.  This will be returned as part of the `verifyKey` response.
        :param ratelimits: Attach ratelimits to this identity.  When verifying keys, you can specify which limits you want to use and all keys attached to this identity, will share the limits.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.V2IdentitiesCreateIdentityRequestBody(
            external_id=external_id,
            meta=utils.get_pydantic_model(
                meta, Optional[models.V2IdentitiesCreateIdentityRequestBodyMeta]
            ),
            ratelimits=utils.get_pydantic_model(
                ratelimits, Optional[List[models.Ratelimit]]
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/v2/identities.createIdentity",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request,
                False,
                False,
                "json",
                models.V2IdentitiesCreateIdentityRequestBody,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(50, 1000, 1.5, 10000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["5XX"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="identities.createIdentity",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "401", "403", "409", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, models.V2IdentitiesCreateIdentityResponseBody
            )
        if utils.match_response(http_res, "400", "application/problem+json"):
            response_data = utils.unmarshal_json(
                http_res.text, errors.BadRequestErrorResponseData
            )
            raise errors.BadRequestErrorResponse(data=response_data)
        if utils.match_response(http_res, "401", "application/problem+json"):
            response_data = utils.unmarshal_json(
                http_res.text, errors.UnauthorizedErrorResponseData
            )
            raise errors.UnauthorizedErrorResponse(data=response_data)
        if utils.match_response(http_res, "403", "application/problem+json"):
            response_data = utils.unmarshal_json(
                http_res.text, errors.ForbiddenErrorResponseData
            )
            raise errors.ForbiddenErrorResponse(data=response_data)
        if utils.match_response(http_res, "409", "application/problem+json"):
            response_data = utils.unmarshal_json(
                http_res.text, errors.ConflictErrorResponseData
            )
            raise errors.ConflictErrorResponse(data=response_data)
        if utils.match_response(http_res, "500", "application/problem+json"):
            response_data = utils.unmarshal_json(
                http_res.text, errors.InternalServerErrorResponseData
            )
            raise errors.InternalServerErrorResponse(data=response_data)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise errors.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def delete_identity(
        self,
        *,
        request: Union[
            models.V2IdentitiesDeleteIdentityRequestBodyUnion,
            models.V2IdentitiesDeleteIdentityRequestBodyUnionTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.V2IdentitiesDeleteIdentityResponseBody:
        r"""
        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(
                request, models.V2IdentitiesDeleteIdentityRequestBodyUnion
            )
        request = cast(models.V2IdentitiesDeleteIdentityRequestBodyUnion, request)

        req = self._build_request(
            method="POST",
            path="/v2/identities.deleteIdentity",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request,
                False,
                False,
                "json",
                models.V2IdentitiesDeleteIdentityRequestBodyUnion,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(50, 1000, 1.5, 10000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["5XX"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="v2.identities.deleteIdentity",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "401", "403", "404", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, models.V2IdentitiesDeleteIdentityResponseBody
            )
        if utils.match_response(http_res, "400", "application/problem+json"):
            response_data = utils.unmarshal_json(
                http_res.text, errors.BadRequestErrorResponseData
            )
            raise errors.BadRequestErrorResponse(data=response_data)
        if utils.match_response(http_res, "401", "application/problem+json"):
            response_data = utils.unmarshal_json(
                http_res.text, errors.UnauthorizedErrorResponseData
            )
            raise errors.UnauthorizedErrorResponse(data=response_data)
        if utils.match_response(http_res, "403", "application/problem+json"):
            response_data = utils.unmarshal_json(
                http_res.text, errors.ForbiddenErrorResponseData
            )
            raise errors.ForbiddenErrorResponse(data=response_data)
        if utils.match_response(http_res, "404", "application/problem+json"):
            response_data = utils.unmarshal_json(
                http_res.text, errors.NotFoundErrorResponseData
            )
            raise errors.NotFoundErrorResponse(data=response_data)
        if utils.match_response(http_res, "500", "application/problem+json"):
            response_data = utils.unmarshal_json(
                http_res.text, errors.InternalServerErrorResponseData
            )
            raise errors.InternalServerErrorResponse(data=response_data)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise errors.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def delete_identity_async(
        self,
        *,
        request: Union[
            models.V2IdentitiesDeleteIdentityRequestBodyUnion,
            models.V2IdentitiesDeleteIdentityRequestBodyUnionTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.V2IdentitiesDeleteIdentityResponseBody:
        r"""
        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(
                request, models.V2IdentitiesDeleteIdentityRequestBodyUnion
            )
        request = cast(models.V2IdentitiesDeleteIdentityRequestBodyUnion, request)

        req = self._build_request_async(
            method="POST",
            path="/v2/identities.deleteIdentity",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request,
                False,
                False,
                "json",
                models.V2IdentitiesDeleteIdentityRequestBodyUnion,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(50, 1000, 1.5, 10000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["5XX"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="v2.identities.deleteIdentity",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "401", "403", "404", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, models.V2IdentitiesDeleteIdentityResponseBody
            )
        if utils.match_response(http_res, "400", "application/problem+json"):
            response_data = utils.unmarshal_json(
                http_res.text, errors.BadRequestErrorResponseData
            )
            raise errors.BadRequestErrorResponse(data=response_data)
        if utils.match_response(http_res, "401", "application/problem+json"):
            response_data = utils.unmarshal_json(
                http_res.text, errors.UnauthorizedErrorResponseData
            )
            raise errors.UnauthorizedErrorResponse(data=response_data)
        if utils.match_response(http_res, "403", "application/problem+json"):
            response_data = utils.unmarshal_json(
                http_res.text, errors.ForbiddenErrorResponseData
            )
            raise errors.ForbiddenErrorResponse(data=response_data)
        if utils.match_response(http_res, "404", "application/problem+json"):
            response_data = utils.unmarshal_json(
                http_res.text, errors.NotFoundErrorResponseData
            )
            raise errors.NotFoundErrorResponse(data=response_data)
        if utils.match_response(http_res, "500", "application/problem+json"):
            response_data = utils.unmarshal_json(
                http_res.text, errors.InternalServerErrorResponseData
            )
            raise errors.InternalServerErrorResponse(data=response_data)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise errors.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )
